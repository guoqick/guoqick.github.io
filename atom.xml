<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>郭琪的小站</title>
  
  <subtitle>人生如逆旅，我亦是行人。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-17T15:34:30.689Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>郭 琪</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>idea与Github的上传下载</title>
    <link href="http://yoursite.com/2018/06/17/idea%E4%B8%8A%E4%B8%8EGithub%E7%9A%84%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/"/>
    <id>http://yoursite.com/2018/06/17/idea上与Github的上传下载/</id>
    <published>2018-06-17T15:14:52.119Z</published>
    <updated>2018-06-17T15:34:30.689Z</updated>
    
    <content type="html"><![CDATA[<p>1.在IDEA中设置Git，在File–&gt;Setting-&gt;Version Control–&gt;Git–&gt;Path to Git executable选择你的git安装后的git.exe文件，然后点击Test，测试是否设置成功 。</p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-3a78234021e6b9ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>2.在IDEA中设置GitHub，File–&gt;Setting-&gt;Version Control–&gt;GibHub</p><p>　　Host：github.com</p><p>　　Token：点击Create API Token，输入在github中注册的用户名和密码生成token</p><p>　　点击Test，测试是否连接成功。</p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-5d56dba9107a2dac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>3.创建本地仓库，VCS–&gt;Import into Version Control–&gt;Create Git Repository… </p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-d19322318ba1b192.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>4.在弹框中选中项目所在的位置，点击OK，此时项目文件全部变成红色 </p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-48d195e4e590a02f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-bf2793cf37466b54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>5.上传项目到本地仓库，项目上右键选择Git–&gt;add，此时项目文件变成绿色，此时文件只是处于暂存区，并没有真正进入到版本库中。。</p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-f45c64c924e10f27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-72b3da090efa5a67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ol start="6"><li><p>项目右键Git–&gt; Commit Directory，在弹窗中输入first commit  ，点击commit，此时项目文件从暂存区真正进入版本库中，项目文件变成白色 .</p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-8308e764e0c742b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-66bcc33d42367ffe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-745b23bdac20b51c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>7.上传项目到GitHub中，VCS–&gt;Import into Version Control–&gt;Share Project on GitHub，在弹框中输入仓库名和描述，点击Share，即可是上传，中间会弹窗输入GitHub的用户名和密码（已输入过用户名和密码并记住的不会再次弹框输入），上传成功后IDEA右下角会给出提示 .</p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-01ebb0a620941c4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-eb051135fb31daf7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-a6872af27837da31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-82442c45c8d9fd89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>8.提交修改文件到GitHub</p><p>　　新增文件（红色），右键–&gt;Git–&gt;add，将新增的文件加入本地仓库，此时文件变绿色</p><p>　　修改文件（蓝色）</p><p>　　在项目右键–&gt;Git–&gt;Commit Directory，查看有变动的文件并输入Commit Message，点击Commit and Push…</p><p>　　提交后会进行语法检查，若存在错误或警告会给出确认提示，点击Commit，弹出Push框，点击Push，上传GitHub成功</p></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/12434140-b56c31f2a50d3073.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-e9b8fa6740793bd1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-15e55f17c0e15c24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-fd347f226a1c447b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>2.把之前本地仓库的项目删掉，从github下载。。</p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-77b971d07226b23c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-0ba11248ccc9fe1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>导入完成的项目如下： </p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-61f691efd711023a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.在IDEA中设置Git，在File–&amp;gt;Setting-&amp;gt;Version Control–&amp;gt;Git–&amp;gt;Path to Git executable选择你的git安装后的git.exe文件，然后点击Test，测试是否设置成功 。&lt;/p&gt;
&lt;p&gt;&lt;im
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Springboot整合ActiveMQ的一个bug解决</title>
    <link href="http://yoursite.com/2018/06/13/Springboot%E6%95%B4%E5%90%88ActiveMQ%E7%9A%84%E4%B8%80%E4%B8%AAbug%E8%A7%A3%E5%86%B3/"/>
    <id>http://yoursite.com/2018/06/13/Springboot整合ActiveMQ的一个bug解决/</id>
    <published>2018-06-13T08:50:48.419Z</published>
    <updated>2018-06-16T02:17:04.532Z</updated>
    
    <content type="html"><![CDATA[<p>​         最近做的一个项目需要一个微服务模块来发送消息，需要整合ActiveMQ,在SendController里注入JmsMessagingTemplate时一直报如下的错：</p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-b2f1e1d65984d7ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>在网上找遍了解决办法，都是让在application.properties文件中加入如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.activemq.pool.enabled=false //如果此处设置为true，需要加如下的依赖包，否则会自动配置失败，报JmsMessagingTemplate注入失败</span><br></pre></td></tr></table></figure><p>我这样做了，可是并没起作用，经过几个小时折腾、查资料。最终发现pool.enabled不能设置为false,因为设置 spring.activemq.pool.enabled=false时，每发送一条数据创建一个连接。 假如每分钟五千条数据的话，就会造五千个连接（TIME_WAIT） ，MQ会被卡死的。所以我搞了个连接池，具体配置：</p><p>在pom.xml也要加入依赖包 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;activemq-pool&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>application.properties文件配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring.activemq.broker-url=tcp://192.168.200.128:61616</span><br><span class="line">spring.activemq.in-memory=false</span><br><span class="line">#true表示使用连接池</span><br><span class="line">spring.activemq.pool.enabled=true</span><br><span class="line">#连接池最大连接数</span><br><span class="line">spring.activemq.pool.max-connections=5</span><br><span class="line">#空闲的连接过期时间，默认为30秒</span><br><span class="line">spring.activemq.pool.idle-timeout=30000</span><br><span class="line">#强制的连接过期时间，与idleTimeout的区别在于：idleTimeout是在连接空闲一段时间失效，而expiryTimeout不管当前连接的情况，只要达到指定时间就失效。默认为0，never </span><br><span class="line">spring.activemq.pool.expiry-timeout=0</span><br></pre></td></tr></table></figure><p>这样弄好后，SendController里的那个错还是没办法解决，搞了半天，恍然大悟：那根本就不是个错，只是个警告而已，于是在注入的那行上面加了一个@SuppressWarnings注解，完美解决！！效果如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-98a2ad0893855fcb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p> 嗯。。它的确不是个bug,但是却带给我很大的意外收获，学到很多！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​         最近做的一个项目需要一个微服务模块来发送消息，需要整合ActiveMQ,在SendController里注入JmsMessagingTemplate时一直报如下的错：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jian
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Oracle数据库的存储过程</title>
    <link href="http://yoursite.com/2018/06/13/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/06/13/Oracle数据库的存储过程/</id>
    <published>2018-06-12T17:11:38.641Z</published>
    <updated>2018-06-12T17:13:29.295Z</updated>
    
    <content type="html"><![CDATA[<h3 id="存储过程说明"><a href="#存储过程说明" class="headerlink" title="存储过程说明"></a>存储过程说明</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>​     1.存储过程是用于特定操作的pl/sql语句块</p><p>　　2.存储过程是预编译过的，经优化后存储在sql内存中，使用时无需再次编译，提高了使用效率；</p><p>　　3.存储过程的代码直接存放在数据库中，一般直接通过存储过程的名称调用，减少了网络流量，加快了系统执行效率；</p><h4 id="存储过程与函数的区别"><a href="#存储过程与函数的区别" class="headerlink" title="存储过程与函数的区别"></a>存储过程与函数的区别</h4><p>　　1.一般来说，存储过程实现的功能要复杂一点，而函数的实现的功能针对性比较强。</p><p>　　2.对于存储过程来说可以返回参数(output)，而函数只能返回值或者表对象。</p><p>　　3.存储过程一般是作为一个独立的部分来执行，而函数可以作为查询语句的一个部分来调用，由于函数可以返回一个表对象，因此它可以在查询语句中位于FROM关键字的后面。</p><h4 id="存储过程的优点"><a href="#存储过程的优点" class="headerlink" title="存储过程的优点"></a>存储过程的优点</h4><p>　　1.执行速度更快 – 在数据库中保存的存储过程语句都是编译过的</p><p>　　2.允许模块化程序设计 ，程序的可移植性更强– 类似方法的复用（使用存储过程可以实现存储过程设计和编码工作的分开进行，只要将存储过程名、参数、返回信息等告诉编程人员即可）；</p><p>　　3.提高系统安全性 – 防止SQL注入 （执行存储过程的用户要具有一定的权限才能使用存储过程）</p><p>　　4.减少网络流通量 – 只要传输存储过程的名称（在大批数据查询时使用存储过程分页查询比其他方式的分页要快很多）</p><p>　　5.在同时进行逐主、从表间的数据维护及有效性验证时，使用存储过程更加方便，可以有效的利用SQL中的事务处理机制　</p><h3 id="存储过程语法及实例"><a href="#存储过程语法及实例" class="headerlink" title="存储过程语法及实例"></a>存储过程语法及实例</h3><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">  create or replace procedure  存储过程的名称(参数1 in|out 类型， 参数2 in|out 类型 , .....)                </span><br><span class="line">  as|is</span><br><span class="line">         -- 声明变量</span><br><span class="line">  begin</span><br><span class="line">         -- 过程化语言</span><br><span class="line">  </span><br><span class="line">  end;</span><br><span class="line">  */</span><br></pre></td></tr></table></figure><p>举例一: 给某员工涨工资(打印涨前，涨后的工资)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">create or replace procedure updateSal(eno in number , psal in number)</span><br><span class="line">as</span><br><span class="line">  oldsal emp.sal%type;</span><br><span class="line">  newsal emp.sal%type;</span><br><span class="line">begin</span><br><span class="line">  -- 打印涨前的工资</span><br><span class="line">  select sal into oldsal from emp where empno = eno;</span><br><span class="line">  dbms_output.put_line(&apos;涨前的工资：&apos;||oldsal) ;</span><br><span class="line">  -- 涨工资的过程</span><br><span class="line">  update emp set sal = sal + psal where empno = eno;</span><br><span class="line">  commit;</span><br><span class="line">  -- 打印涨后的工资</span><br><span class="line">  select sal into newsal from emp where empno = eno;</span><br><span class="line">  dbms_output.put_line(&apos;涨后的工资：&apos;|| newsal); </span><br><span class="line">end;</span><br></pre></td></tr></table></figure><p>– 访问存储过程<br>   – call 存储过程名称(参数列表);  – 只能访问只有输入参数的存储过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call updateSal(7788, 100);</span><br></pre></td></tr></table></figure><p>结果：   涨前的工资：3302<br>              涨后的工资：3402</p><p>举例二：获取某员工的年薪</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create or replace procedure getYearSal(eno in number , yearsal out number)</span><br><span class="line">is </span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">       select sal * 12 + nvl(comm,0 ) into yearsal from emp where empno = eno;</span><br><span class="line"></span><br><span class="line">end;</span><br></pre></td></tr></table></figure><p>访问存储过程：这里不能再用call —因为call只能访问只有输入参数的存储过程,要用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">         ys number;</span><br><span class="line">     begin</span><br><span class="line">       getYearSal(7788,  ys);</span><br><span class="line">       dbms_output.put_line(ys);</span><br><span class="line">     end;</span><br></pre></td></tr></table></figure><p>执行结果 ：   40824</p><p>举例三：（输出参数为游标类型）：查询某部门的员工信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create or replace procedure getEmpsByDeptno(dno in number,emps out sys_refcursor )</span><br><span class="line">  as</span><br><span class="line">  </span><br><span class="line">  begin</span><br><span class="line">    --动态游标的使用： open 游标名 for SQL语句;</span><br><span class="line">    open emps for select * from emp where deptno = dno;</span><br><span class="line">  end;</span><br></pre></td></tr></table></figure><p>– 访问输出参数为游标类型的存储过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">      emps sys_refcursor;</span><br><span class="line">      erow emp%rowtype;</span><br><span class="line">   begin</span><br><span class="line">     getEmpsByDeptno(20 , emps);</span><br><span class="line">     --遍历游标</span><br><span class="line">     loop</span><br><span class="line">        fetch emps into erow;</span><br><span class="line">        exit when emps%notfound;</span><br><span class="line">        dbms_output.put_line(&apos;编号:&apos;||erow.empno||&apos;，姓名：&apos;||erow.ename||&apos;,工作:&apos;||erow.job);                </span><br><span class="line">     end loop;</span><br><span class="line">   end;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>编号:7369，姓名：SMITH,工作:CLERK<br>编号:7566，姓名：JONES,工作:MANAGER<br>编号:7788，姓名：SCOTT,工作:ANALYST<br>编号:7876，姓名：ADAMS,工作:CLERK<br>编号:7902，姓名：FORD,工作:ANALYST</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;存储过程说明&quot;&gt;&lt;a href=&quot;#存储过程说明&quot; class=&quot;headerlink&quot; title=&quot;存储过程说明&quot;&gt;&lt;/a&gt;存储过程说明&lt;/h3&gt;&lt;h4 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一道oracle 行列转换题</title>
    <link href="http://yoursite.com/2018/06/13/%E4%B8%80%E9%81%93oracle%20%E8%A1%8C%E5%88%97%E8%BD%AC%E6%8D%A2%E9%A2%98/"/>
    <id>http://yoursite.com/2018/06/13/一道oracle 行列转换题/</id>
    <published>2018-06-12T16:23:23.160Z</published>
    <updated>2018-06-13T09:11:29.221Z</updated>
    
    <content type="html"><![CDATA[<p>题目：从员工表查询每年入职员工数，并得到如下效果。</p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-0ecc41329fdee89d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>答案如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/12434140-4c5685aadce4b385.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select count(*) num,to_char(hiredate, &apos;yyyy&apos;) hireyear </span><br><span class="line">from emp group by to_char(hiredate, &apos;yyyy&apos;);</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/12434140-70b1b175c55ebc36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select sum(num) &quot;Total&quot; ,</span><br><span class="line">max(decode(hireyear,&apos;1980&apos; ,num)) &quot;1980&quot;,</span><br><span class="line">max(decode(hireyear,&apos;1981&apos; ,num)) &quot;1981&quot;,</span><br><span class="line">max(decode(hireyear,&apos;1982&apos; ,num)) &quot;1982&quot;,</span><br><span class="line">max(decode(hireyear,&apos;1987&apos; ,num)) &quot;1987&quot;</span><br><span class="line">from  (select count(*) num,to_char(hiredate, &apos;yyyy&apos;) hireyear </span><br><span class="line">from emp group by to_char(hiredate, &apos;yyyy&apos;)) t</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/12434140-f82005bfe10a5228.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>其中的max用min,avg,sum都可以！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目：从员工表查询每年入职员工数，并得到如下效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12434140-0ecc41329fdee89d.png?imageMogr2/auto-o
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>各种排序算法学习总结</title>
    <link href="http://yoursite.com/2018/06/09/%E5%90%84%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/06/09/各种排序算法学习总结/</id>
    <published>2018-06-09T13:45:49.733Z</published>
    <updated>2018-06-12T06:14:11.472Z</updated>
    
    <content type="html"><![CDATA[<p>常用排序算法的复杂度分析整理  </p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-c8001fdc2ad9a1c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>具体分析如下：</p><h3 id="冒泡排序（BubbleSort）"><a href="#冒泡排序（BubbleSort）" class="headerlink" title="冒泡排序（BubbleSort）"></a>冒泡排序（BubbleSort）</h3><p>冒泡排序是最慢的排序算法。在实际运用中它是效率最低的算法。它通过一趟又一趟地比较数组中的每一个元素，使较大的数据下沉，较小的数据上升。它是O(n^2)的算法。</p><p>步骤：<br>（1）比较相邻的元素。如果第一个比第二个大，就交换他们两个。<br>（2）对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。<br>（3）针对所有的元素重复以上的步骤，除了最后一个。<br>（4）持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p><p>详细原理及实现参照：<a href="http://guoqick.cn/2018/06/09/冒泡排序原理%20/#more" target="_blank" rel="noopener"><strong>冒泡排序原理及Java实现</strong></a></p><h3 id="选择排序（SelectSort）"><a href="#选择排序（SelectSort）" class="headerlink" title="选择排序（SelectSort）"></a>选择排序（SelectSort）</h3><p>选择排序(Selection sort)是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小元素，然后放到排序序列末尾。以此类推，直到所有元素均排序完毕。<br>这种排序方法效率是 O(n2)。在实际应用中处于和冒泡排序基本相同的地位。它们只是排序算法发展的初级阶段，在实际中使用较少。</p><p>详细原理及实现参照：<a href="http://guoqick.cn/2018/06/09/选择排序原理/#more" target="_blank" rel="noopener"><strong>选择排序原理及Java实现</strong></a></p><h3 id="插入排序（InsertSort）"><a href="#插入排序（InsertSort）" class="headerlink" title="插入排序（InsertSort）"></a>插入排序（InsertSort）</h3><p>插入排序（Insertion Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。<br>插入排序是对冒泡排序的改进。它比冒泡排序快2倍。一般不用在数据大于1000的场合下使用插入排序，或者重复排序超过200数据项的序列。<br>步骤：<br>（1）从第一个元素开始，该元素可以认为已经被排序<br>（2）取出下一个元素，在已经排序的元素序列中从后向前扫描<br>（3）如果该元素（已排序）大于新元素，将该元素移到下一位置<br>（4）重复步骤3，直到找到已排序的元素小于或者等于新元素的位置<br>将新元素插入到该位置中<br>（4）重复步骤2</p><p>详细原理及实现参照：<a href="http://guoqick.cn/2018/06/09/插入排序原理/#more" target="_blank" rel="noopener"><strong>插入排序原理及Java实现</strong></a></p><h3 id="希尔排序（ShellSort）"><a href="#希尔排序（ShellSort）" class="headerlink" title="希尔排序（ShellSort）"></a>希尔排序（ShellSort）</h3><p>希尔排序，也称递减增量排序算法，是插入排序的一种高速而稳定的改进版本。希尔排序是基于插入排序的以下两点性质而提出改进方法的：<br>（1）插入排序在对几乎已经排好序的数据操作时， 效率高， 即可以达到线性排序的效率<br>（2）但插入排序一般来说是低效的， 因为插入排序每次只能将数据移动一位</p><p>Shell排序通过将数据分成不同的组，先对每一组进行排序，然后再对所有的元素进行一次插入排序，以减少数据交换和移动的次数。平均效率是O(nlogn)。其中分组的合理性会对算法产生重要的影响。现在多用D.E.Knuth的分组方法。</p><p>Shell排序比冒泡排序快5倍，比插入排序大致快2倍。Shell排序比起QuickSort，MergeSort，HeapSort慢很多。但是它相对比较简单，它适合于数据量在5000以下并且速度并不是特别重要的场合。它对于数据量较小的数列重复排序是非常好的。</p><p>详细原理及实现参照：<a href="http://guoqick.cn/2018/06/09/希尔排序原理/#more" target="_blank" rel="noopener"><strong>希尔排序原理及Java实现</strong></a></p><h3 id="堆排序（HeapSort）"><a href="#堆排序（HeapSort）" class="headerlink" title="堆排序（HeapSort）"></a>堆排序（HeapSort）</h3><p>堆排序适合于数据量非常大的场合（百万数据）。</p><p>堆排序不需要大量的递归或者多维的暂存数组。这对于数据量非常巨大的序列是合适的。比如超过数百万条记录，因为快速排序，归并排序都使用递归来设计算法，在数据量非常大的时候，可能会发生堆栈溢出错误。</p><p>堆排序会将所有的数据建成一个堆，最大的数据在堆顶，然后将堆顶数据和序列的最后一个数据交换。接下来再次重建堆，交换数据，依次下去，就可以排序所有的数据。</p><p>详细原理及实现参照：<a href="http://guoqick.cn/2018/06/09/堆排序原理/#more" target="_blank" rel="noopener"><strong>堆排序原理及Java实现</strong></a></p><h3 id="归并排序（MergeSort）"><a href="#归并排序（MergeSort）" class="headerlink" title="归并排序（MergeSort）"></a>归并排序（MergeSort）</h3><p>归并排序（Merge sort，台湾译作：合并排序）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用.<br>归并排序先分解要排序的序列，从1分成2，2分成4，依次分解，当分解到只有1个一组的时候，就可以排序这些分组，然后依次合并回原来的序列中，这样就可以排序所有数据。合并排序比堆排序稍微快一点，但是需要比堆排序多一倍的内存空间，因为它需要一个额外的数组。</p><p>步骤：<br>（1）申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列<br>（2）设定两个指针，最初位置分别为两个已经排序序列的起始位置<br>（3）比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置<br>（4）重复步骤3直到某一指针达到序列尾<br>（5）将另一序列剩下的所有元素直接复制到合并序列尾</p><p>详细原理及实现参照：<a href="http://guoqick.cn/2018/06/09/归并排序原理/#more" target="_blank" rel="noopener"><strong>归并排序原理及Java实现</strong></a></p><h3 id="快速排序（QuickSort）"><a href="#快速排序（QuickSort）" class="headerlink" title="快速排序（QuickSort）"></a>快速排序（QuickSort）</h3><p>快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要<em>Ο(n log n)</em>次比较。在最坏状况下则需要<img src="https://upload-images.jianshu.io/upload_images/12434140-5d3090d39eba5a65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png">次比较，但这种状况并不常见。事实上，快速排序通常明显比其他<em>Ο(n log n)</em> 算法更快，因为它的内部循环可以在大部分的架构上很有效率地被实现出来，且在大部分真实世界的数据，可以决定设计的选择，减少所需时间的二次方项之可能性。<br>快速排序是一个就地排序，分而治之，大规模递归的算法。从本质上来说，它是归并排序的就地版本。快速排序可以由下面四步组成。</p><p>（1） 如果不多于1个数据，直接返回。<br>（2） 一般选择序列最左边的值作为支点数据。<br>（3） 将序列分成2部分，一部分都大于支点数据，另外一部分都小于支点数据。<br>（4） 对两边利用递归排序数列。</p><p>快速排序比大部分排序算法都要快。尽管我们可以在某些特殊的情况下写出比快速排序快的算法，但是就通常情况而言，没有比它更快的了。快速排序是递归的，对于内存非常有限的机器来说，它不是一个好的选择。</p><p>详细原理及实现参照：<a href="http://guoqick.cn/2018/06/09/快速排序原理/#more" target="_blank" rel="noopener"><strong>快速排序原理及Java实现</strong></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;常用排序算法的复杂度分析整理  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12434140-c8001fdc2ad9a1c5.png?imageMogr2/auto-orient/str
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>希尔排序原理</title>
    <link href="http://yoursite.com/2018/06/09/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/06/09/希尔排序原理/</id>
    <published>2018-06-09T13:29:41.903Z</published>
    <updated>2018-06-09T13:52:23.917Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>希尔排序也成为“缩小增量排序”，其基本原理是，现将待排序的数组元素分成多个子序列，使得每个子序列的元素个数相对较少，然后对各个子序列分别进行直接插入排序，待整个待排序列“基本有序”后，最后在对所有元素进行一次直接插入排序。因此，我们要采用跳跃分割的策略：将相距某个“增量”的记录组成一个子序列，这样才能保证在子序列内分别进行直接插入排序后得到的结果是基本有序而不是局部有序。希尔排序是对直接插入排序算法的优化和升级。<br>所谓的基本有序，就是小的关键字基本在前面，大的基本在后面，不大不小的基本在中间，例如｛2,1,3,6,4,7,5,8,9,｝就可以称为基本有序了。但像｛1,5,9,3,7,8,2,4,6｝这样，9在第三位，2在倒数第三位就谈不上基本有序。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>希尔排序的关键并不是随便分组后各自排序，而是将相隔某个“增量”的记录组成一个子序列，实现跳跃式移动，使得排序的效率提高。需要注意的是，增量序列的最后一个增量值必须等于1才行。另外，由于记录是跳跃式的移动，希尔排序并不是一种稳定的排序算法。<br>希尔排序最好时间复杂度和平均时间复杂度都是<img src="https://upload-images.jianshu.io/upload_images/12434140-d9a21b795489f75f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"> ，最坏时间复杂度为<img src="https://upload-images.jianshu.io/upload_images/12434140-ff5be2f60e68d4d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png">。</p><h3 id="排序过程如下"><a href="#排序过程如下" class="headerlink" title="排序过程如下"></a>排序过程如下</h3><p>以数组{26, 53, 67, 48, 57, 13, 48, 32, 60, 50 }为例，步长序列为{5,2,1}<br>初始化关键字： [26, 53, 67, 48, 57, 13, 48, 32, 60, 50 ]</p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-7152d5e970298b72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>最后的排序结果：  13 26 32 48 48 50 53 57 60 67 .</p><h3 id="JAVA实现原理如下"><a href="#JAVA实现原理如下" class="headerlink" title="JAVA实现原理如下"></a>JAVA实现原理如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public static void shellSortSmallToBig(int[] data) &#123;</span><br><span class="line">        int j = 0;</span><br><span class="line">        int temp = 0;</span><br><span class="line">        for (int increment = data.length / 2; increment &gt; 0; increment /= 2) &#123;</span><br><span class="line">            System.out.println(&quot;increment:&quot; + increment);</span><br><span class="line">            for (int i = increment; i &lt; data.length; i++) &#123;</span><br><span class="line">                // System.out.println(&quot;i:&quot; + i);</span><br><span class="line">                temp = data[i];</span><br><span class="line">                for (j = i - increment; j &gt;= 0; j -= increment) &#123;</span><br><span class="line">                    // System.out.println(&quot;j:&quot; + j);</span><br><span class="line">                    // System.out.println(&quot;temp:&quot; + temp);</span><br><span class="line">                    // System.out.println(&quot;data[&quot; + j + &quot;]:&quot; + data[j]);</span><br><span class="line">                    if (temp &lt; data[j]) &#123;</span><br><span class="line">                        data[j + increment] = data[j];</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                data[j + increment] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            for (int i = 0; i &lt; data.length; i++)</span><br><span class="line">                System.out.print(data[i] + &quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] data = new int[] &#123; 26, 53, 67, 48, 57, 13, 48, 32, 60, 50 &#125;;</span><br><span class="line">        shellSortSmallToBig(data);</span><br><span class="line">        System.out.println(Arrays.toString(data));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a href="http://guoqick.cn/2018/06/09/各种排序算法学习总结/#more" target="_blank" rel="noopener"><strong>排序大总结</strong></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h3&gt;&lt;p&gt;希尔排序也成为“缩小增量排序”，其基本原理是，现将待排序的数组元素分成多个子序列，使得每个子序列的元素个数相对较少，然后对各
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>堆排序原理</title>
    <link href="http://yoursite.com/2018/06/09/%E5%A0%86%E6%8E%92%E5%BA%8F%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/06/09/堆排序原理/</id>
    <published>2018-06-09T13:29:41.900Z</published>
    <updated>2018-06-09T13:53:01.085Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>堆是一种特殊的树形数据结构，其每个节点都有一个值，通常提到的堆都是指一颗完全二叉树，根结点的值小于（或大于）两个子节点的值，同时，根节点的两个子树也分别是一个堆。 </p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-84e7e32063060c2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>堆排序就是利用堆（假设利用大顶堆）进行排序的方法。它的基本思想是，将待排序的序列构造成一个大顶堆。此时，整个序列的最大值就是堆顶的根节点。将它移走（其实就是将其与堆数组的末尾元素交换，此时末尾元素就是最大值），然后将剩余的 <em>n-1</em> 个序列重新构造成一个堆，这样就会得到 <em>n</em> 个元素中次大的值。如此反复执行，便能得到一个有序序列了。  堆排序的实现需要解决的两个关键问题：  （1）将一个无序序列构成一个堆。  （2）输出堆顶元素后，调整剩余元素成为一个新堆。 </p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>堆排序的运行时间主要耗费在初始构建堆和在重建堆时反复筛选上。在构建对的过程中，因为我们是完全二叉树从最下层最右边的非终端节点开始构建，将它与其孩子进行比较和若有必要的互换，对每个非终端节点来说，其实最多进行两次比较和互换操作，因此整个构建堆的时间复杂度为<em>O(n)</em>。<br>在正式排序时，第i次取堆顶记录重建堆需要用<em>O(logi)</em>的时间（完全二叉树的某个节点到根节点的距离为<img src="https://upload-images.jianshu.io/upload_images/12434140-d00fde5e36727311.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png">，并且需要取<em>n-1</em>次堆顶记录，因此，重建堆的时间复杂度为<em>O(nlogn)</em>。<br>所以总体来说，堆排序的时间复杂度为<em>O(nlogn)</em>，由于堆排序对原始记录的状态并不敏感，因此它无论是最好、最坏和平均时间复杂度均为<em>O(nlogn)</em>。这在性能上显然要远远好过于冒泡、简单选择、直接插入的时间复杂度了。<br>空间复杂度上，它只有一个用来交换的暂存单元，也非常的不错。不过由于记录的比较与交换是跳跃式进行的，因此堆排序也是一种不稳定的排序方法。<br>另外，由于出事构建堆所需要的比较次数比较多，因此，他并不适合待排序序列个数较少的情况。</p><h3 id="大根堆排序算法的基本操作"><a href="#大根堆排序算法的基本操作" class="headerlink" title="大根堆排序算法的基本操作"></a>大根堆排序算法的基本操作</h3><p>① 初始化操作：将R[1..n]构造为初始堆；<br>②每一趟排序的基本操作：将当前无序区的堆顶记录R[1]和该区间的最后一个记录交换，然后将新的无序区调整为堆(亦称重建堆)。</p><p>注意：<br>①只需做n-1趟排序，选出较大的n-1个关键字即可以使得文件递增有序。<br>②用小根堆排序与利用大根堆类似，只不过其排序结果是递减有序的。堆排序和直接选择排序相反：在任何时刻堆排序中无序区总是在有序区之前，且有序区是在原向量的尾部由后往前逐步扩大至整个向量为止。</p><h3 id="Java实现如下"><a href="#Java实现如下" class="headerlink" title="Java实现如下"></a>Java实现如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class HeapSort &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 构建大顶堆</span><br><span class="line">     */</span><br><span class="line">    public static void adjustHeap(int[] a, int i, int len) &#123;</span><br><span class="line">        int temp, j;</span><br><span class="line">        temp = a[i];</span><br><span class="line">        for (j = 2 * i; j &lt; len; j *= 2) &#123;// 沿关键字较大的孩子结点向下筛选</span><br><span class="line">            if (j &lt; len &amp;&amp; a[j] &lt; a[j + 1])</span><br><span class="line">                ++j; // j为关键字中较大记录的下标</span><br><span class="line">            if (temp &gt;= a[j])</span><br><span class="line">                break;</span><br><span class="line">            a[i] = a[j];</span><br><span class="line">            i = j;</span><br><span class="line">        &#125;</span><br><span class="line">        a[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void heapSort(int[] a) &#123;</span><br><span class="line">        int i;</span><br><span class="line">        for (i = a.length / 2 - 1; i &gt;= 0; i--) &#123;// 构建一个大顶堆</span><br><span class="line">            adjustHeap(a, i, a.length - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        for (i = a.length - 1; i &gt;= 0; i--) &#123;// 将堆顶记录和当前未经排序子序列的最后一个记录交换</span><br><span class="line">            int temp = a[0];</span><br><span class="line">            a[0] = a[i];</span><br><span class="line">            a[i] = temp;</span><br><span class="line">            adjustHeap(a, 0, i - 1);// 将a中前i-1个记录重新调整为大顶堆</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int a[] = &#123; 51, 46, 20, 18, 65, 97, 82, 30, 77, 50 &#125;;</span><br><span class="line">        heapSort(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://guoqick.cn/2018/06/09/各种排序算法学习总结/#more" target="_blank" rel="noopener"><strong>排序大总结</strong></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h3&gt;&lt;p&gt;堆是一种特殊的树形数据结构，其每个节点都有一个值，通常提到的堆都是指一颗完全二叉树，根结点的值小于（或大于）两个子节点的值，
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>快速排序原理</title>
    <link href="http://yoursite.com/2018/06/09/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/06/09/快速排序原理/</id>
    <published>2018-06-09T13:29:41.897Z</published>
    <updated>2018-06-09T13:51:48.211Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>快速排序是我们之前学习的冒泡排序的升级，他们都属于交换类排序，都是采用不断的比较和移动来实现排序的。快速排序是一种非常高效的排序算法，它的实现，增大了记录的比较和移动的距离，将关键字较大的记录从前面直接移动到后面，关键字较小的记录从后面直接移动到前面，从而减少了总的比较次数和移动次数。同时采用“分而治之”的思想，把大的拆分为小的，小的拆分为更小的，其原理如下：对于给定的一组记录，选择一个基准元素,通常选择第一个元素或者最后一个元素,通过一趟扫描，将待排序列分成两部分,一部分比基准元素小,一部分大于等于基准元素,此时基准元素在其排好序后的正确位置,然后再用同样的方法递归地排序划分的两部分，直到序列中的所有记录均有序为止。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>（1）最坏时间复杂度<br>最坏情况是指每次区间划分的结果都是基准关键字的左边（或右边）序列为空，而另一边区间中的记录仅比排序前少了一项，即选择的关键字是待排序记录的最小值或最大值。最坏情况下快速排序的时间复杂度为<img src="https://upload-images.jianshu.io/upload_images/12434140-d72a10c772f6a2a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>（2）最好时间复杂度<br>最好情况是指每次区间划分的结果都是基准关键字的左右两边长度相等或者相差为1，即选择的基准关键字为待排序的记录的中间值。此时进行比较次数总共为 <em>nlogn</em>，所以最好情况下快速排序的时间复杂度为<img src="https://upload-images.jianshu.io/upload_images/12434140-2d85a109e9c1611f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>（3）平均时间复杂度<br>快速排序的平均时间复杂度为<img src="https://upload-images.jianshu.io/upload_images/12434140-2d85a109e9c1611f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png">。在所有平均时间复杂度为<em>O(nlogn)</em>的算法中，快速排序的平均性能是最好的。<br>（4）空间复杂度<br>快速排序的过程中需要一个栈空间来实现递归。最好情况，递归树的深度为<img src="https://upload-images.jianshu.io/upload_images/12434140-8818142c68655d1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png">，其空间复杂度也就是<em>O(nlogn)</em>；最坏情况下，需要进行 <em>n-1</em>次递归，其空间复杂度为<em>O(n)</em>；平均情况，空间复杂度为<em>O(nlogn)</em>.<br>（5）基准关键字的选取，基准关键字的选取是决定快速排序算法的关键，常用的基准关键字的选取方式如下：<br>第一种：三者取中。将序列首、尾和中间位置上的记录进行比较，选择三者中值作为基准关键字。<br>第二种：取left和right之间的一个随机数<img src="https://upload-images.jianshu.io/upload_images/12434140-773bd9f59727de99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png">，用<em>n[m]</em>作为基准关键字。采用这种方法得到的快速排序一般称为随机的快速排序。</p><h3 id="排序过程如下"><a href="#排序过程如下" class="headerlink" title="排序过程如下"></a>排序过程如下</h3><p>以数组{49,38,65,97,76,13,27,49}为例，选择第一个元素49为基准<br>初始化关键字： [49,38,65,97,76,13,27,49] </p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-84d8122881883c16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="Java实现如下"><a href="#Java实现如下" class="headerlink" title="Java实现如下"></a>Java实现如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class QuickSort &#123;</span><br><span class="line">    public static void sort(int a[], int low, int hight) &#123;</span><br><span class="line">        int i, j, index;</span><br><span class="line">        if (low &gt; hight) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        i = low;</span><br><span class="line">        j = hight;</span><br><span class="line">        index = a[i]; // 用子表的第一个记录做基准</span><br><span class="line">        while (i &lt; j) &#123; // 从表的两端交替向中间扫描</span><br><span class="line">            while (i &lt; j &amp;&amp; a[j] &gt;= index)</span><br><span class="line">                j--;</span><br><span class="line">            if (i &lt; j)</span><br><span class="line">                a[i++] = a[j];// 用比基准小的记录替换低位记录</span><br><span class="line">            while (i &lt; j &amp;&amp; a[i] &lt; index)</span><br><span class="line">                i++;</span><br><span class="line">            if (i &lt; j) // 用比基准大的记录替换高位记录</span><br><span class="line">                a[j--] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        a[i] = index;// 将基准数值替换回 a[i]</span><br><span class="line">        sort(a, low, i - 1); // 对低子表进行递归排序</span><br><span class="line">        sort(a, i + 1, hight); // 对高子表进行递归排序</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void quickSort(int a[]) &#123;</span><br><span class="line">        sort(a, 0, a.length - 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        int a[] = &#123; 49, 38, 65, 97, 76, 13, 27, 49 &#125;;</span><br><span class="line">        quickSort(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://guoqick.cn/2018/06/09/各种排序算法学习总结/#more" target="_blank" rel="noopener"><strong>排序大总结</strong></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h3&gt;&lt;p&gt;快速排序是我们之前学习的冒泡排序的升级，他们都属于交换类排序，都是采用不断的比较和移动来实现排序的。快速排序是一种非常高效的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>归并排序原理</title>
    <link href="http://yoursite.com/2018/06/09/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/06/09/归并排序原理/</id>
    <published>2018-06-09T13:29:41.894Z</published>
    <updated>2018-06-09T13:51:31.370Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>归并排序就是利用归并的思想实现的排序方法。而且充分利用了完全二叉树的深度是<img src="https://upload-images.jianshu.io/upload_images/12434140-45e7a4fe4c37343c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png">的特性，因此效率比较高。其基本原理如下：对于给定的一组记录，利用递归与分治技术将数据序列划分成为越来越小的半子表，在对半子表排序，最后再用递归方法将排好序的半子表合并成为越来越大的有序序列。<br>经过第一轮比较后得到最小的记录，然后将该记录的位置与第一个记录的位置交换；接着对不包括第一个记录以外的其他记录进行第二次比较，得到最小记录并与第二个位置记录交换；重复该过程，知道进行比较的记录只剩下一个为止。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>一趟归并需要将数组 <em>a[]</em>中相邻的长度为h的有序序列进行两两归并.并将结果放到temp[]中，这需要将待排序列中的所有记录扫描一遍，因此耗费<em>O(n)</em>，而又完全二叉树的深度可知，整个归并排序需要进行<img src="https://upload-images.jianshu.io/upload_images/12434140-065b198d5059057b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png">次，因此总的时间复杂度为<em>O(nlogn)</em>，而且这是归并排序算法中最好、最坏、平均的时间性能。<br>由于归并排序在归并过程中需要与原始序列同样数量的存储空间存放归并结果以及递归时深度为<img src="https://upload-images.jianshu.io/upload_images/12434140-065b198d5059057b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png">的栈空间，因此空间复杂度为<em>O(n+logn)</em>.<br>另外，对代码进行仔细研究，发现merge函数中有<em>if (a[i] &lt; a[j])</em> 的语句，说明它需要两两比较，不存在跳跃，因此归并排序是一种稳定的排序算法。<br>也就是说，归并排序是一种比较占内存，但却效率高且稳定的算法。</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>（1）申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列<br>（2）设定两个指针，最初位置分别为两个已经排序序列的起始位置<br>（3）比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置<br>（4）重复步骤3直到某一指针达到序列尾<br>（5）将另一序列剩下的所有元素直接复制到合并序列尾</p><h3 id="归并排序过程如下"><a href="#归并排序过程如下" class="headerlink" title="归并排序过程如下"></a>归并排序过程如下</h3><p>以数组{50,10,90,30,70,40,80,60,20}为例，</p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-3570d76bc7034745.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>最后的排序结果：  10,20,30,40,50,60,70,80,90 </p><h3 id="Java实现如下"><a href="#Java实现如下" class="headerlink" title="Java实现如下"></a>Java实现如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">public class MergeSort &#123;</span><br><span class="line"></span><br><span class="line">    public static void merge(int[] a, int low, int mid, int high) &#123;</span><br><span class="line">        int[] temp = new int[high - low + 1];</span><br><span class="line">        int i = low;// 左指针</span><br><span class="line">        int j = mid + 1;// 右指针</span><br><span class="line">        int k = 0;</span><br><span class="line">        // 把较小的数先移到新数组中</span><br><span class="line">        while (i &lt;= mid &amp;&amp; j &lt;= high) &#123;</span><br><span class="line">            if (a[i] &lt; a[j]) &#123;</span><br><span class="line">                temp[k++] = a[i++];</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                temp[k++] = a[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 把左边剩余的数移入数组</span><br><span class="line">        while (i &lt;= mid) &#123;</span><br><span class="line">            temp[k++] = a[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        // 把右边边剩余的数移入数组</span><br><span class="line">        while (j &lt;= high) &#123;</span><br><span class="line">            temp[k++] = a[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        // 把新数组中的数覆盖nums数组</span><br><span class="line">        for (int k2 = 0; k2 &lt; temp.length; k2++) &#123;</span><br><span class="line">            a[k2 + low] = temp[k2];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void mergeSort(int[] a, int low, int high) &#123;</span><br><span class="line">        int mid = (low + high) / 2;</span><br><span class="line">        if (low &lt; high) &#123;</span><br><span class="line">            // 左边</span><br><span class="line">            mergeSort(a, low, mid);</span><br><span class="line">            // 右边</span><br><span class="line">            mergeSort(a, mid + 1, high);</span><br><span class="line">            // 左右归并</span><br><span class="line">            merge(a, low, mid, high);</span><br><span class="line">            System.out.println(Arrays.toString(a));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int a[] = &#123; 51, 46, 20, 18, 65, 97, 82, 30, 77, 50 &#125;;</span><br><span class="line">        mergeSort(a, 0, a.length - 1);</span><br><span class="line">        System.out.println(&quot;排序结果：&quot; + Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://guoqick.cn/2018/06/09/各种排序算法学习总结/#more" target="_blank" rel="noopener"><strong>排序大总结</strong></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h3&gt;&lt;p&gt;归并排序就是利用归并的思想实现的排序方法。而且充分利用了完全二叉树的深度是&lt;img src=&quot;https://upload-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>冒泡排序</title>
    <link href="http://yoursite.com/2018/06/09/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E5%8E%9F%E7%90%86%20/"/>
    <id>http://yoursite.com/2018/06/09/冒泡排序原理 /</id>
    <published>2018-06-09T13:29:41.891Z</published>
    <updated>2018-06-09T13:52:09.552Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h4><p>冒泡排序顾名思义就是整个过程像气泡一样往上升，单向冒泡排序的基本思想是（假设由小到大排序）：对于给定n个记录，从第一个记录开始依次对相邻的两个记录进行比较，当前面的记录大于后面的记录时，交换位置，进行一轮比较和换位后，n个记录的最大记录将位于第n位，然后对前（n-1）个记录进行第二轮比较；重复该过程，直到记录剩下一个为止。</p><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p>当最好的情况，也就是要排序的序列本身就是有序的，需要进行<em>（n-1）</em>次比较，没有数据交换，时间复杂度为<em>O(n)</em>. 当最坏的情况，即待排序的表是逆序的情况，此时需要比较次数为：<br>$$<br>1+2+3+…+(n-1)=n(n-1)/2<br>$$<br> 次，并作等数量级的记录移动，因此总的时间复杂度为<img src="https://upload-images.jianshu.io/upload_images/12434140-6f290d8695017850.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="排序过程如下"><a href="#排序过程如下" class="headerlink" title="排序过程如下"></a>排序过程如下</h4><p>以数组{49,38,65,97,76,13,27,49}为例，</p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-991062ec7b3a54b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-4ff065f92e772bee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="Java实现如下"><a href="#Java实现如下" class="headerlink" title="Java实现如下"></a>Java实现如下</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = a.length - <span class="number">1</span>; j &gt; i; --j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[j] &lt; a[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    temp = a[j];</span><br><span class="line">                    a[j] = a[j - <span class="number">1</span>];</span><br><span class="line">                    a[j - <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a[] = &#123; <span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>&#125;;</span><br><span class="line">        bubbleSort(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://guoqick.cn/2018/06/09/各种排序算法学习总结/#more" target="_blank" rel="noopener"><strong>排序大总结</strong></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h4&gt;&lt;p&gt;冒泡排序顾名思义就是整个过程像气泡一样往上升，单向冒泡排序的基本思想是（假设由小到大排序）：对于给定n个记录，从第一个记录开
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>插入排序原理</title>
    <link href="http://yoursite.com/2018/06/09/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/06/09/插入排序原理/</id>
    <published>2018-06-09T13:29:41.887Z</published>
    <updated>2018-06-09T13:53:19.552Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>直接插入排序的基本操作是将一个记录插入到已经排好的有序表中，从而得到一个新的、记录数增1的有序表。对于给定的一组记录，初始时假定第一个记录自成一个有序序列，其余记录为无序序列。接着从第二个记录开始，按照记录的大小依次将当前处理的记录插入到其之前的有序序列中，直到最后一个记录插到有序序列中为止。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>当最好的情况，也就是要排序的表本身就是有序的，此时只有数据比较，没有数据移动，时间复杂度为<em>O(n)</em>。<br>当最坏的情况，即待排序的表是逆序的情况，此时需要比较次数为：<em>2+3+…+n=(n+2)(n-1)/2</em> 次,而记录移动的最大值也达到了 <em>(n+4)(n-1)/2</em> 次. 如果排序记录是随机的，那么根据概率相同的原则，平均比较和移动次数约为<img src="https://upload-images.jianshu.io/upload_images/12434140-74788e96d31462ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png">次 ,因此，得出直接插入排序发的时间复杂度为<img src="https://upload-images.jianshu.io/upload_images/12434140-a7900e91804079dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png">。从这里可以看出，同样的是时间复杂度为<img src="https://upload-images.jianshu.io/upload_images/12434140-a7900e91804079dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png">，直接插入排序法比冒泡和简单选择排序的性能要好一些。 </p><h3 id="排序过程如下"><a href="#排序过程如下" class="headerlink" title="排序过程如下"></a>排序过程如下</h3><p>以数组{38,65,97,76,13,27,49}为例， </p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-cbad0a924433f0e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="Java实现如下"><a href="#Java实现如下" class="headerlink" title="Java实现如下"></a>Java实现如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class InsertSort &#123;</span><br><span class="line">    public static void insertSort(int[] a) &#123;</span><br><span class="line">        int i, j, insertNote;// 要插入的数据</span><br><span class="line">        for (i = 1; i &lt; a.length; i++) &#123;// 从数组的第二个元素开始循环将数组中的元素插入</span><br><span class="line">            insertNote = a[i];// 设置数组中的第2个元素为第一次循环要插入的数据</span><br><span class="line">            j = i - 1;</span><br><span class="line">            while (j &gt;= 0 &amp;&amp; insertNote &lt; a[j]) &#123;</span><br><span class="line">                a[j + 1] = a[j];// 如果要插入的元素小于第j个元素,就将第j个元素向后移动</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            a[j + 1] = insertNote;// 直到要插入的元素不小于第j个元素,将insertNote插入到数组中</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int a[] = &#123; 38,65,97,76,13,27,49 &#125;;</span><br><span class="line">        insertSort(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://guoqick.cn/2018/06/09/各种排序算法学习总结/#more" target="_blank" rel="noopener"><strong>排序大总结</strong></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h3&gt;&lt;p&gt;直接插入排序的基本操作是将一个记录插入到已经排好的有序表中，从而得到一个新的、记录数增1的有序表。对于给定的一组记录，初始时
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>选择排序原理</title>
    <link href="http://yoursite.com/2018/06/09/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/06/09/选择排序原理/</id>
    <published>2018-06-09T13:29:41.884Z</published>
    <updated>2018-06-09T13:50:52.320Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本思想："><a href="#基本思想：" class="headerlink" title="基本思想："></a>基本思想：</h3><p>选择排序是一种简单直观的排序算法，其基本原理如下：对于给定的一组记录，经过第一轮比较后得到最小的记录，然后将该记录的位置与第一个记录的位置交换；接着对不包括第一个记录以外的其他记录进行第二次比较，得到最小记录并与第二个位置记录交换；重复该过程，知道进行比较的记录只剩下一个为止。</p><h3 id="复杂度分析："><a href="#复杂度分析：" class="headerlink" title="复杂度分析："></a>复杂度分析：</h3><p>从简单选择排序的过程来看，它最大的特点是交换移动数据次数相当少，这样就节约了相应的时间。分析它的时间复杂度发现，无论是最好最差情况，其比较次数都是一样多，第 <em>i</em> 趟排序需要进行 <em>n-i</em> 次关键字比较，此时需要比较次<img src="https://upload-images.jianshu.io/upload_images/12434140-a449bc81f020277e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>，对于交换次数而言，当最好的时候，交换<em>0</em>次，最差的时候，也就是初始降时，交换次数为 <em>n-1</em>次，基于最终的时间排序与交换次数总和，因此，总的时间复杂度依然为 <img src="https://upload-images.jianshu.io/upload_images/12434140-ddd4fbaac1f1f8ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>，与冒泡排序相同，但简单选择排序的性能要优于冒泡排序 。</p><h3 id="排序过程如下："><a href="#排序过程如下：" class="headerlink" title="排序过程如下："></a>排序过程如下：</h3><p>以数组{49,38,65,97,76,13,27,49}为例，</p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-34f2e9eecc222408.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="Java实现如下："><a href="#Java实现如下：" class="headerlink" title="Java实现如下："></a>Java实现如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class SelectSort &#123;</span><br><span class="line"></span><br><span class="line">    public static void selectSort(int[] a) &#123;</span><br><span class="line">        if (a == null || a.length &lt;= 0) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 0; i &lt; a.length; i++) &#123;</span><br><span class="line">            int temp = a[i];</span><br><span class="line">            int flag = i; // 将当前下标定义为最小值下标</span><br><span class="line">            for (int j = i + 1; j &lt; a.length; j++) &#123;</span><br><span class="line">                if (a[j] &lt; temp) &#123;// a[j] &lt; temp 从小到大排序；a[j] &gt; temp 从大到小排序</span><br><span class="line">                    temp = a[j];</span><br><span class="line">                    flag = j; // 如果有小于当前最小值的关键字将此关键字的下标赋值给flag</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (flag != i) &#123;</span><br><span class="line">                a[flag] = a[i];</span><br><span class="line">                a[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int a[] = &#123; 49,38,65,97,76,13,27,49 &#125;;</span><br><span class="line">        selectSort(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://guoqick.cn/2018/06/09/各种排序算法学习总结/#more" target="_blank" rel="noopener"><strong>排序大总结</strong></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基本思想：&quot;&gt;&lt;a href=&quot;#基本思想：&quot; class=&quot;headerlink&quot; title=&quot;基本思想：&quot;&gt;&lt;/a&gt;基本思想：&lt;/h3&gt;&lt;p&gt;选择排序是一种简单直观的排序算法，其基本原理如下：对于给定的一组记录，经过第一轮比较后得到最小的记录，然后将该记录的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java程序员面试99问</title>
    <link href="http://yoursite.com/2018/06/06/java%E9%9D%A2%E8%AF%9599%E9%97%AE/"/>
    <id>http://yoursite.com/2018/06/06/java面试99问/</id>
    <published>2018-06-06T14:16:23.758Z</published>
    <updated>2018-06-09T09:56:19.274Z</updated>
    
    <content type="html"><![CDATA[<p>历时两周，呕心沥血整理而成，良心之作！！翻遍各大站点、公众号总结出的最常问的99个问题。大部分都是把网上最好的答案网址直接粘贴过来，适合准备面试的人复习之用！！！</p><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><h5 id="String-StringBuffer-与-StringBuilder的区别"><a href="#String-StringBuffer-与-StringBuilder的区别" class="headerlink" title="String , StringBuffer 与 StringBuilder的区别"></a><strong>String , StringBuffer 与 StringBuilder的区别</strong></h5><p>这是一道重要而且高频被问到的面试题，如果这题都没有回答好，那面试官对你就大打折扣了。</p><p><strong>面试管：</strong>String , StringBuffer 与 StringBuilder之间有什么区别吗？</p><p><strong>你的回答：</strong></p><p>对于字符串拼接：</p><p><strong>性能方面：</strong>StringBuilder &gt; StringBuffer &gt; String（+）（for循环里面字符串拼接）</p><p><strong>线程安全：</strong>StringBuilder （非线程安全，速度快），StringBuffer （线程安全，速度慢）</p><p><strong>如何选择：</strong>StringBuilder （方法内，无线程安全问题），StringBuffer （有线程安全问题，使用它）</p><p>3点建议：（加分项）</p><ul><li>当你连接 2 或 3 个String时，使用String.concat()。</li><li>如果你要连接多于3个String（不含3）,并且你能够精确预测出最终结果的长度，使用StringBuilder/StringBuffer，并设定初始化容量。</li><li>如果你要连接多于3个String（不含3）,并且你不能够精确预测出最终结果的长度，使用StringBundler。</li></ul><p>【1】<a href="https://www.cnblogs.com/dolphin0520/p/3778589.html" target="_blank" rel="noopener">https://www.cnblogs.com/dolphin0520/p/3778589.html</a></p><p>面试官继续问题：</p><p>StringBuffer 为什么是线程安全的呢？</p><p>【2】<a href="https://blog.csdn.net/u014086926/article/details/52069074" target="_blank" rel="noopener">https://blog.csdn.net/u014086926/article/details/52069074</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//StringBuffer源码</span><br><span class="line">/**</span><br><span class="line"> * @throws IndexOutOfBoundsException &#123;@inheritDoc&#125;</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public synchronized void getChars(int srcBegin, int srcEnd, char[] dst,int dstBegin)&#123;</span><br><span class="line">    super.getChars(srcBegin, srcEnd, dst, dstBegin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面试官可能还会继续问：</p><p>为什么加 synchronized 这个关键字，就是线程安全的呢？</p><h5 id="Vector，ArrayList，LinkedList的区别"><a href="#Vector，ArrayList，LinkedList的区别" class="headerlink" title="Vector，ArrayList，LinkedList的区别"></a><strong>Vector，ArrayList，LinkedList的区别</strong></h5><p>一、同步性 </p><p>ArrayList,LinkedList是不同步的，而Vestor是同步的。所以如果不要求线程安全的话，可以使用ArrayList或LinkedList，可以节省为同步而耗费的开销。但在多线程的情况下，有时候就不得不使用Vector了。当然，也可以通过一些办法包装ArrayList,LinkedList，使他们也达到同步，但效率可能会有所降低。 </p><p>二、数据增长<br>从内部实现机制来讲ArrayList和Vector都是使用Objec的数组形式来存储的。当你向这两种类型中增加元素的时候，如果元素的数目超出了内部数组目前的长度它们都需要扩展内部数组的长度，Vector缺省情况下自动增长原来一倍的数组长度，ArrayList是原来的50%,所以最后你获得的这个集合所占的空间总是比你实际需要的要大。所以如果你要在集合中保存大量的数据那么使用Vector有一些优势，因为你可以通过设置集合的初始化大小来避免不必要的资源开销。 </p><p>三、检索、插入、删除对象的效率 </p><p>ArrayList和Vector中，从指定的位置（用index）检索一个对象，或在集合的末尾插入、删除一个对象的时间是一样的，可表示为O(1)。但是，如果在集合的其他位置增加或移除元素那么花费的时间会呈线形增长：O(n-i)，其中n代表集合中元素的个数，i代表元素增加或移除元素的索引位置。为什么会这样呢？以为在进行上述操作的时候集合中第i和第i个元素之后的所有元素都要执行(n-i)个对象的位移操作。<br>LinkedList中，在插入、删除集合中任何位置的元素所花费的时间都是一样的—O(1)，但它在索引一个元素的时候比较慢，为O(i),其中i是索引的位置。 </p><p>一般大家都知道ArrayList和LinkedList的大致区别：<br>​     1.ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。<br>​     2.对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。<br>​     3.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。 </p><h5 id="List如何去除重复数据"><a href="#List如何去除重复数据" class="headerlink" title="List如何去除重复数据"></a><strong>List如何去除重复数据</strong></h5><p>【1】<a href="http://www.2cto.com/kf/201708/664237.html" target="_blank" rel="noopener">http://www.2cto.com/kf/201708/664237.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* AAAA AAAA BBBB BBBB CCCC CCCC CCCC CCCC</span><br><span class="line">*/</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">         List&lt;string&gt; list = new ArrayList&lt;string&gt;();</span><br><span class="line">         list.add(&quot;AAAA&quot;);</span><br><span class="line">         list.add(&quot;AAAA&quot;);</span><br><span class="line">         list.add(&quot;AAAA&quot;);</span><br><span class="line">         list.add(&quot;BBBB&quot;);</span><br><span class="line">         list.add(&quot;BBBB&quot;);</span><br><span class="line">         list.add(&quot;BBBB&quot;);</span><br><span class="line">         list.add(&quot;CCCC&quot;);</span><br><span class="line">         list.add(&quot;CCCC&quot;);</span><br><span class="line">         list.add(&quot;CCCC&quot;);</span><br><span class="line">         list.add(&quot;DDDD&quot;);</span><br><span class="line">         new Test().removeDuplicateWithOrder(list);</span><br><span class="line">//      System.out.println(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      // 删除ArrayList中重复元素</span><br><span class="line">public static void removeDuplicate(List list) &#123;</span><br><span class="line">    for (int i = 0; i &lt; list.size() - 1; i++) &#123;</span><br><span class="line">        for (int j = list.size() - 1; j &gt; i; j--) &#123;</span><br><span class="line">               if (list.get(j).equals(list.get(i))) &#123;</span><br><span class="line">                  list.remove(j);</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      // 方法二：通过HashSet剔除</span><br><span class="line">      // 删除ArrayList中重复元素,add进去顺序就变了不考虑顺序的话可以使用</span><br><span class="line">public static void removeDuplicate1(List list) &#123;</span><br><span class="line">         HashSet h = new HashSet(list);</span><br><span class="line">         list.clear();</span><br><span class="line">         list.addAll(h);</span><br><span class="line">         System.out.println(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      // 方法三： 删除ArrayList中重复元素，保持顺序</span><br><span class="line">      // 删除ArrayList中重复元素，保持顺序</span><br><span class="line">public static void removeDuplicateWithOrder(List list) &#123;</span><br><span class="line">         Set set = new HashSet();</span><br><span class="line">         List newList = new ArrayList();</span><br><span class="line">         for (Iterator iter = list.iterator(); iter.hasNext();) &#123;</span><br><span class="line">            Object element = iter.next();</span><br><span class="line">            if (set.add(element))</span><br><span class="line">               newList.add(element);</span><br><span class="line">         &#125;</span><br><span class="line">         list.clear();</span><br><span class="line">         list.addAll(newList);</span><br><span class="line">         System.out.println(&quot; remove duplicate &quot; + list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自己手动实现一个线程池"><a href="#自己手动实现一个线程池" class="headerlink" title="自己手动实现一个线程池"></a><strong>自己手动实现一个线程池</strong></h5><p>问题一：为什么需要线程池；</p><p>问题二：如何动手实现一个线程池；</p><p>【1】<a href="http://blog.csdn.net/w2393040183/article/details/52177572" target="_blank" rel="noopener">http://blog.csdn.net/w2393040183/article/details/52177572</a></p><h5 id="Java字节流和字符流的区别"><a href="#Java字节流和字符流的区别" class="headerlink" title="Java字节流和字符流的区别"></a><strong>Java字节流和字符流的区别</strong></h5><p>经过以上的描述，我们可以知道字节流与字符流之间主要的区别体现在以下几个方面：</p><ul><li>字节流操作的基本单元为字节；字符流操作的基本单元为Unicode码元。</li><li>字节流默认不使用缓冲区；字符流使用缓冲区。</li><li>字节流通常用于处理二进制数据，实际上它可以处理任意类型的数据，但它不支持直接写入或读取Unicode码元；字符流通常处理文本数据，它支持写入及读取Unicode码元。</li></ul><p>所以对于字节流和字符流的选择，我们建议：在开发中尽量都去使用字节流进行操作，因为字节流可以处理图片、音乐、文字，也可以方便进行传输或者文字的编码转换；如果在处理中文的使用考虑字符流。</p><p>【1】<a href="http://bbs.itheima.com/thread-277923-1-1.html" target="_blank" rel="noopener">http://bbs.itheima.com/thread-277923-1-1.html</a></p><h5 id="多线程实现生产者-消费者模式"><a href="#多线程实现生产者-消费者模式" class="headerlink" title="多线程实现生产者/消费者模式"></a><strong>多线程实现生产者/消费者模式</strong></h5><h5 id="在Java中什么是线程调度？"><a href="#在Java中什么是线程调度？" class="headerlink" title="在Java中什么是线程调度？"></a><strong>在Java中什么是线程调度？</strong></h5><p>【1】<a href="https://blog.csdn.net/nalanmingdian/article/details/77748326" target="_blank" rel="noopener">https://blog.csdn.net/nalanmingdian/article/details/77748326</a></p><h5 id="线程与进程的区别？"><a href="#线程与进程的区别？" class="headerlink" title="线程与进程的区别？"></a><strong>线程与进程的区别？</strong></h5><p><a href="http://blog.csdn.net/yaosiming2011/article/details/44280797" target="_blank" rel="noopener">http://blog.csdn.net/yaosiming2011/article/details/44280797</a></p><p><strong>死锁与活锁区别，死锁与饥饿的区别？</strong></p><p><a href="http://www.cnblogs.com/lance43990740/p/6853631.html" target="_blank" rel="noopener">http://www.cnblogs.com/lance43990740/p/6853631.html</a></p><h5 id="在线程中你怎么处理不可控制异常"><a href="#在线程中你怎么处理不可控制异常" class="headerlink" title="在线程中你怎么处理不可控制异常"></a><strong>在线程中你怎么处理不可控制异常</strong></h5><p>【1】<a href="http://blog.csdn.net/Dxx23/article/details/44775735" target="_blank" rel="noopener">http://blog.csdn.net/Dxx23/article/details/44775735</a></p><p>java为我们提供了一种线程内发生异常时能够在线程代码边界之外处理异常的回调机制，即Thread对象提供的setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler eh)方法。通过该方法给某个thread设置一个UncaughtExceptionHandler，可以确保在该线程出现异常时能通过回调UncaughtExceptionHandler接口的public void uncaughtException(Thread t, Throwable e) 方法来处理异常，这样的好处或者说目的是可以在线程代码边界之外（Thread的run()方法之外），有一个地方能处理未捕获异常。但是要特别明确的是：虽然是在回调方法中处理异常，但这个回调方法在执行时依然还在抛出异常的这个线程中！另外还要特别说明一点：如果线程是通过线程池创建，线程异常发生时UncaughtExceptionHandler接口不一定会立即回调。</p><p><strong>多线程上下文切换</strong></p><p>【1】<a href="http://www.cnblogs.com/szlbm/p/5505707.html" target="_blank" rel="noopener">http://www.cnblogs.com/szlbm/p/5505707.html</a></p><h5 id="HashTable，HashMap，TreeMap的区别"><a href="#HashTable，HashMap，TreeMap的区别" class="headerlink" title="HashTable，HashMap，TreeMap的区别"></a><strong>HashTable，HashMap，TreeMap的区别</strong></h5><p>【1】<a href="http://blog.csdn.net/natian306/article/details/10858097" target="_blank" rel="noopener">http://blog.csdn.net/natian306/article/details/10858097</a></p><p>【2】<a href="http://www.cnblogs.com/tengpan-cn/p/5909395.html" target="_blank" rel="noopener">http://www.cnblogs.com/tengpan-cn/p/5909395.html</a></p><h5 id="IO-BIO-NIO-AIO编程模型"><a href="#IO-BIO-NIO-AIO编程模型" class="headerlink" title="IO,BIO,NIO,AIO编程模型"></a>IO,BIO,NIO,AIO编程模型</h5><p>【1】<a href="http://blog.csdn.net/anxpp/article/details/51512200" target="_blank" rel="noopener">http://blog.csdn.net/anxpp/article/details/51512200</a><br>【2】<a href="http://blog.csdn.net/jiaomingliang/article/details/47684713" target="_blank" rel="noopener">http://blog.csdn.net/jiaomingliang/article/details/47684713</a></p><p>如果你想吃一份宫保鸡丁盖饭： </p><p>同步阻塞：你到饭馆点餐，然后在那<br>等着，还要一边喊：好了没啊！ </p><p>同步非阻塞：在饭馆点完餐，就去遛狗了。不过溜一会儿，就回饭馆喊一声：好了没啊！ </p><p>异步阻塞：遛狗的时候，接到饭馆电话，说饭做好了，让您亲自去拿。 </p><p>异步非阻塞：饭馆打电话说，我们知道您的位置，一会给你送过来，安心遛狗就可以了。</p><h5 id="TreeMap实现原理"><a href="#TreeMap实现原理" class="headerlink" title="TreeMap实现原理"></a><strong>TreeMap实现原理</strong></h5><p>【1】<a href="http://blog.csdn.net/chenssy/article/details/26668941" target="_blank" rel="noopener">http://blog.csdn.net/chenssy/article/details/26668941</a></p><h5 id="HashMap实现原理"><a href="#HashMap实现原理" class="headerlink" title="HashMap实现原理"></a><strong>HashMap实现原理</strong></h5><p>【1】<a href="http://blog.csdn.net/vking_wang/article/details/14166593" target="_blank" rel="noopener">http://blog.csdn.net/vking_wang/article/details/14166593</a></p><h5 id="如何判断一棵树-tree-是对称的"><a href="#如何判断一棵树-tree-是对称的" class="headerlink" title="如何判断一棵树(tree)是对称的"></a><strong>如何判断一棵树(tree)是对称的</strong></h5><p>【1】<a href="http://blog.csdn.net/yangmm2048/article/details/45689561" target="_blank" rel="noopener">http://blog.csdn.net/yangmm2048/article/details/45689561</a></p><h5 id="如何生成全局唯一的编码（序列号）"><a href="#如何生成全局唯一的编码（序列号）" class="headerlink" title="如何生成全局唯一的编码（序列号）"></a><strong>如何生成全局唯一的编码（序列号）</strong></h5><p>【1】<a href="http://www.lmyw.net.cn/?p=1267" target="_blank" rel="noopener">http://www.lmyw.net.cn/?p=1267</a></p><h5 id="关于Java内存模型，一个对象（两个属性，四个方法）实例化100次，现在内存中的存储状态，几个对象，几个属性，几个方法。"><a href="#关于Java内存模型，一个对象（两个属性，四个方法）实例化100次，现在内存中的存储状态，几个对象，几个属性，几个方法。" class="headerlink" title="关于Java内存模型，一个对象（两个属性，四个方法）实例化100次，现在内存中的存储状态，几个对象，几个属性，几个方法。"></a>关于Java内存模型，一个对象（两个属性，四个方法）实例化100次，现在内存中的存储状态，几个对象，几个属性，几个方法。</h5><h5 id="map实现按照key字典排序，并且按照顺序打印key-和-value"><a href="#map实现按照key字典排序，并且按照顺序打印key-和-value" class="headerlink" title="map实现按照key字典排序，并且按照顺序打印key 和 value?"></a><strong>map实现按照key字典排序，并且按照顺序打印key 和 value?</strong></h5><p>【1】<a href="http://blog.csdn.net/bwgang/article/details/7879563" target="_blank" rel="noopener">http://blog.csdn.net/bwgang/article/details/7879563</a></p><h5 id="反射"><a href="#反射" class="headerlink" title="反射"></a><strong>反射</strong></h5><p>1）反射：根据类的信息来加载这个类，然后构造这个对象，然后再调用这个类中的属性和方法</p><p>2）记住获取类的三种方式。</p><p>3）反射的应用</p><p>4）加分项：反射的性能不好</p><p>【1】<a href="http://uule.iteye.com/blog/1423512" target="_blank" rel="noopener">http://uule.iteye.com/blog/1423512</a></p><p>【2】<a href="https://blog.csdn.net/the_fire/article/details/6020402" target="_blank" rel="noopener">https://blog.csdn.net/the_fire/article/details/6020402</a></p><h5 id="syschronized实现原理"><a href="#syschronized实现原理" class="headerlink" title="syschronized实现原理"></a><strong>syschronized实现原理</strong></h5><p>【1】<a href="http://www.cnblogs.com/paddix/p/5367116.html" target="_blank" rel="noopener">http://www.cnblogs.com/paddix/p/5367116.html</a></p><p><strong>lock接口比synchronized块的优势是什么</strong></p><p>【1】<a href="https://www.cnblogs.com/iyyy/p/7993788.html" target="_blank" rel="noopener">https://www.cnblogs.com/iyyy/p/7993788.html</a></p><h5 id="syschronized与重入锁ReenTrantLock的区别"><a href="#syschronized与重入锁ReenTrantLock的区别" class="headerlink" title="syschronized与重入锁ReenTrantLock的区别"></a><strong>syschronized与重入锁ReenTrantLock的区别</strong></h5><p>可重入性：<br>从名字上理解，ReenTrantLock的字面意思就是再进入<br>的锁，其实synchronized关键字所使用的锁也是可重<br>入的，两者关于这个的区别不大。两者都是同<br>一个线程每次进入一次，锁的计数器都自增1，<br>所以要等到锁的计数器下降为0时才能释放锁。<br>三.synchronized和ReentrantLock的区别<br>除了synchronized的功能,多了三个高级功能.<br>等待可中断,公平锁,绑定多个Condition.</p><ul><li>1.等待可中断<br>在持有锁的线程长时间不释放锁的时候,等待的线程可以选择放弃等待.   tryLock(long timeout, TimeUnit unit)</li><li>2.公平锁按照申请锁的顺序来一次获得锁称为公平锁.synchronized的是非公平锁,ReentrantLock可以通过构造函数实现公平锁.    new RenentrantLock(boolean fair)</li><li>3.绑定多个Condition<br>通过多次newCondition可以获得多个Condition对象,可以简单的实现比较复杂的线程同步的功能.通过await(),signal();</li></ul><h5 id="Java多线程"><a href="#Java多线程" class="headerlink" title="Java多线程"></a><strong>Java多线程</strong></h5><h5 id="wait（），notify（）和notifyAll（）"><a href="#wait（），notify（）和notifyAll（）" class="headerlink" title="wait（），notify（）和notifyAll（）"></a><strong>wait（），notify（）和notifyAll（）</strong></h5><p>【1】<a href="https://blog.csdn.net/luoweifu/article/details/46664809" target="_blank" rel="noopener">https://blog.csdn.net/luoweifu/article/details/46664809</a></p><p>作业：能通过wait 、notify  、notifyAll默写出生产者消费者模式</p><h5 id="抽象类与接口的区别"><a href="#抽象类与接口的区别" class="headerlink" title="抽象类与接口的区别"></a><strong>抽象类与接口的区别</strong></h5><p>【1】<a href="http://www.importnew.com/12399.html" target="_blank" rel="noopener">http://www.importnew.com/12399.html</a><br>     <a href="http://www.cnblogs.com/beanmoon/archive/2012/12/06/2805221.html" target="_blank" rel="noopener">http://www.cnblogs.com/beanmoon/archive/2012/12/06/2805221.html</a></p><h5 id="equals-hashcode"><a href="#equals-hashcode" class="headerlink" title="equals hashcode "></a><strong>equals hashcode </strong></h5><p>【1】<a href="http://blog.csdn.net/ftx2540993425/article/details/51206130" target="_blank" rel="noopener">http://blog.csdn.net/ftx2540993425/article/details/51206130</a><br>【2】<a href="http://www.cnblogs.com/Qian123/p/5703507.html" target="_blank" rel="noopener">http://www.cnblogs.com/Qian123/p/5703507.html</a></p><h5 id="lambda优点"><a href="#lambda优点" class="headerlink" title="lambda优点"></a><strong>lambda优点</strong></h5><p>【1】<a href="http://developer.51cto.com/art/201304/387681.htm" target="_blank" rel="noopener">http://developer.51cto.com/art/201304/387681.htm</a></p><p>【2】</p><h5 id="关键字transient"><a href="#关键字transient" class="headerlink" title="关键字transient"></a><strong>关键字transient</strong></h5><p>【1】<a href="http://blog.csdn.net/d12345678a/article/details/54178659" target="_blank" rel="noopener">http://blog.csdn.net/d12345678a/article/details/54178659</a></p><h5 id="JDK-和JRE的区别是什么"><a href="#JDK-和JRE的区别是什么" class="headerlink" title="JDK 和JRE的区别是什么"></a>JDK 和JRE的区别是什么</h5><p>Java运行时环境(JRE:Java Runtime Environment)是将要执行Java程序的Java虚拟机。它同时也包含了执行applet需要的浏览器插件。Java开发工具包(JDK) 是完整的Java软件开发包，包含了JRE，编译器和其他的工具(比如：JavaDoc，Java调试器)，可以让开发者开发、编译、执行Java应用程 序。</p><p>JDK(Java Development Kit ) 中包含JRE，JRE中包含 JVM。</p><p>JDK &gt;  JRE &gt; JVM</p><p>JDK中包含的JRE主要是为JDK自带的开发工具提供运行环境，与JDK并列的那个JRE是为用户编写的JAVA代码提供运行环境的。</p><p>classpath配置的是JDK的lib目录，path配置的是JDK的bin目录。</p><p>补充问题：</p><p>如果技术面试官问你：”你觉得前面几轮面试的怎么样“  ?</p><h5 id="Java到底是不是一种纯面向对象语言？"><a href="#Java到底是不是一种纯面向对象语言？" class="headerlink" title="Java到底是不是一种纯面向对象语言？"></a><strong>Java到底是不是一种纯面向对象语言？</strong></h5><p>【1】<a href="https://news.cnblogs.com/n/548327/" target="_blank" rel="noopener">https://news.cnblogs.com/n/548327/</a></p><h5 id="HTTP请求的header头解析"><a href="#HTTP请求的header头解析" class="headerlink" title="HTTP请求的header头解析"></a><strong>HTTP请求的header头解析</strong></h5><p><a href="http://blog.csdn.net/hufan11100914/article/details/48029633" target="_blank" rel="noopener">http://blog.csdn.net/hufan11100914/article/details/48029633</a></p><h5 id="如何判断一个对象已经被回收"><a href="#如何判断一个对象已经被回收" class="headerlink" title="如何判断一个对象已经被回收"></a><strong>如何判断一个对象已经被回收</strong></h5><p>【1】<a href="http://blog.csdn.net/canot/article/details/51037938" target="_blank" rel="noopener">http://blog.csdn.net/canot/article/details/51037938</a></p><h5 id="假如有两个线程，一个线程A，一个线程B都会访问一个加锁方法，可能存在并发情况，但是线程B访问频繁，线程A访问次数很少，问如何优化。-然后面试官说有了解过重度锁和轻度锁吗"><a href="#假如有两个线程，一个线程A，一个线程B都会访问一个加锁方法，可能存在并发情况，但是线程B访问频繁，线程A访问次数很少，问如何优化。-然后面试官说有了解过重度锁和轻度锁吗" class="headerlink" title="假如有两个线程，一个线程A，一个线程B都会访问一个加锁方法，可能存在并发情况，但是线程B访问频繁，线程A访问次数很少，问如何优化。(然后面试官说有了解过重度锁和轻度锁吗)"></a><strong>假如有两个线程，一个线程A，一个线程B都会访问一个加锁方法，可能存在并发情况，但是线程B访问频繁，线程A访问次数很少，问如何优化。(然后面试官说有了解过重度锁和轻度锁吗)</strong></h5><h5 id="有三个线程ID分别是A、B、C-请有多线编程实现，在屏幕上循环打印10次ABCABC…"><a href="#有三个线程ID分别是A、B、C-请有多线编程实现，在屏幕上循环打印10次ABCABC…" class="headerlink" title="有三个线程ID分别是A、B、C,请有多线编程实现，在屏幕上循环打印10次ABCABC…"></a><strong>有三个线程ID分别是A、B、C,请有多线编程实现，在屏幕上循环打印10次ABCABC…</strong></h5><h5 id="将两个有序数组-组合-并为一个-有序数组"><a href="#将两个有序数组-组合-并为一个-有序数组" class="headerlink" title="将两个有序数组   组合 并为一个 有序数组"></a><strong>将两个有序数组   组合 并为一个 有序数组</strong></h5><p>【1】<a href="https://www.cnblogs.com/clarke157/p/6910425.html" target="_blank" rel="noopener">https://www.cnblogs.com/clarke157/p/6910425.html</a></p><h5 id="JAVA值类型和引用类型的区别"><a href="#JAVA值类型和引用类型的区别" class="headerlink" title="JAVA值类型和引用类型的区别"></a><strong>JAVA值类型和引用类型的区别</strong></h5><p>【1】<a href="http://www.cnblogs.com/InterLinkXiaoCai/p/4951889.html" target="_blank" rel="noopener">http://www.cnblogs.com/InterLinkXiaoCai/p/4951889.html</a></p><h5 id="基本类型转换"><a href="#基本类型转换" class="headerlink" title="基本类型转换"></a><strong>基本类型转换</strong></h5><p>【1】<a href="http://blog.csdn.net/u011583105/article/details/16349095" target="_blank" rel="noopener">http://blog.csdn.net/u011583105/article/details/16349095</a></p><h5 id="递归算法笔试题"><a href="#递归算法笔试题" class="headerlink" title="递归算法笔试题"></a><strong>递归算法笔试题</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> /*</span><br><span class="line"> * 一列数的规则如下: 1、1、2、3、5、8、13、21、34...... 求第30位数是多少， 用递归算法实现。</span><br><span class="line"> **/</span><br><span class="line">static int find30(int n)&#123;</span><br><span class="line">        if (n &lt;= 0)</span><br><span class="line">            return 0;</span><br><span class="line">        else if(n &gt; 0 &amp;&amp; n &lt;= 2)</span><br><span class="line">            return 1;</span><br><span class="line">        return find30(n-1)+find30(n-2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【1】<a href="https://www.cnblogs.com/lan-writenbook/p/5487265.html" target="_blank" rel="noopener">https://www.cnblogs.com/lan-writenbook/p/5487265.html</a></p><h5 id="内存泄漏和内存溢出区别"><a href="#内存泄漏和内存溢出区别" class="headerlink" title="内存泄漏和内存溢出区别"></a><strong>内存泄漏和内存溢出区别</strong></h5><p>Java中的内存泄露，广义并通俗的说，就是：不再会被使用的对象的内存不能被回收，就是内存泄露。</p><p>【1】<a href="http://blog.csdn.net/buutterfly/article/details/6617375" target="_blank" rel="noopener">http://blog.csdn.net/buutterfly/article/details/6617375</a></p><h5 id="内存溢出和内存泄漏的原因"><a href="#内存溢出和内存泄漏的原因" class="headerlink" title="内存溢出和内存泄漏的原因"></a><strong>内存溢出和内存泄漏的原因</strong></h5><p>【1】<a href="http://www.cnblogs.com/bluestorm/archive/2012/08/06/2625604.html" target="_blank" rel="noopener">http://www.cnblogs.com/bluestorm/archive/2012/08/06/2625604.html</a></p><p>【2】<a href="http://blog.csdn.net/anxpp/article/details/51325838" target="_blank" rel="noopener">http://blog.csdn.net/anxpp/article/details/51325838</a></p><p>【3】<a href="http://blog.csdn.net/shanyu1198124123/article/details/52414392" target="_blank" rel="noopener">http://blog.csdn.net/shanyu1198124123/article/details/52414392</a></p><h5 id="子线程循环10次，接着主线程循环100次，接着又回到子线程循环10次，接着再回到主线程循环100次，如此循环50次"><a href="#子线程循环10次，接着主线程循环100次，接着又回到子线程循环10次，接着再回到主线程循环100次，如此循环50次" class="headerlink" title="子线程循环10次，接着主线程循环100次，接着又回到子线程循环10次，接着再回到主线程循环100次，如此循环50次"></a>子线程循环10次，接着主线程循环100次，接着又回到子线程循环10次，接着再回到主线程循环100次，如此循环50次</h5><p>【1】<a href="http://www.cnblogs.com/ysloong/p/6370104.html" target="_blank" rel="noopener">http://www.cnblogs.com/ysloong/p/6370104.html</a></p><h5 id="Condition的作用"><a href="#Condition的作用" class="headerlink" title="Condition的作用"></a><strong>Condition的作用</strong></h5><p>【1】<a href="https://blog.csdn.net/heyutao007/article/details/49889849" target="_blank" rel="noopener">https://blog.csdn.net/heyutao007/article/details/49889849</a></p><p>【2】<a href="http://blog.csdn.net/ghsau/article/details/7481142" target="_blank" rel="noopener">http://blog.csdn.net/ghsau/article/details/7481142</a></p><h5 id="现在有T1、T2、T3三个线程，你怎样保证T2在T1执行完后执行，T3在T2执行完后执行"><a href="#现在有T1、T2、T3三个线程，你怎样保证T2在T1执行完后执行，T3在T2执行完后执行" class="headerlink" title="现在有T1、T2、T3三个线程，你怎样保证T2在T1执行完后执行，T3在T2执行完后执行"></a><strong>现在有T1、T2、T3三个线程，你怎样保证T2在T1执行完后执行，T3在T2执行完后执行</strong></h5><h5 id="Java多线程中join方法的理解"><a href="#Java多线程中join方法的理解" class="headerlink" title="Java多线程中join方法的理解"></a>Java多线程中join方法的理解</h5><p>【0】<a href="http://blog.csdn.net/wangxiaotongfan/article/details/51741741" target="_blank" rel="noopener">http://blog.csdn.net/wangxiaotongfan/article/details/51741741</a></p><p>【1】<a href="http://uule.iteye.com/blog/1101994" target="_blank" rel="noopener">http://uule.iteye.com/blog/1101994</a></p><p>【2】<a href="http://www.cnblogs.com/aboutblank/p/3631453.html" target="_blank" rel="noopener">http://www.cnblogs.com/aboutblank/p/3631453.html</a></p><h5 id="equals-与-hashcode-（重要）"><a href="#equals-与-hashcode-（重要）" class="headerlink" title="equals() 与 hashcode()  （重要）"></a><strong>equals() 与 hashcode()  （重要）</strong></h5><p>【1】<a href="http://www.importnew.com/25783.html" target="_blank" rel="noopener">http://www.importnew.com/25783.html</a></p><h5 id="Lock接口比synchronized块的优势是什么"><a href="#Lock接口比synchronized块的优势是什么" class="headerlink" title="Lock接口比synchronized块的优势是什么"></a><strong>Lock接口比synchronized块的优势是什么</strong></h5><p>【1】<a href="https://www.cnblogs.com/iyyy/p/7993788.html" target="_blank" rel="noopener">https://www.cnblogs.com/iyyy/p/7993788.html</a></p><h5 id="java中-wait-和-sleep-方法的不同"><a href="#java中-wait-和-sleep-方法的不同" class="headerlink" title="java中 wait 和 sleep 方法的不同"></a><strong>java中 wait 和 sleep 方法的不同</strong></h5><p>【1】<a href="http://blog.csdn.net/clam_clam/article/details/6803667" target="_blank" rel="noopener">http://blog.csdn.net/clam_clam/article/details/6803667</a></p><p>sleep和wait的区别有：</p><ul><li>当二者都定义在同步中时，线程执行到sleep，不会释放锁。线程执行到wait，会释放锁。</li></ul><ul><li>首先应该明确 sleep 方法是Thread类中定义的方法，而 wait 方法是Object类中定义的方法。</li><li>sleep方法必须人为地为其指定时间。</li></ul><p>​     wait方法既可以指定时间，也可以不指定时间。</p><ul><li>sleep方法时间到，线程处于临时阻塞状态或者运行状态。</li></ul><p>​     wait方法如果没有被设置时间，就必须要通过 notify 或者 notifyAll 来唤醒。</p><ul><li>sleep方法不一定非要定义在同步中。  wait方法必须定义在同步中。</li></ul><ul><li>sleep必须捕获异常，而wait，notify和notifyAll不需要捕获异常</li></ul><p><strong>用Java实现阻塞队列</strong></p><p>【1】<a href="https://blog.csdn.net/x_i_y_u_e/article/details/51398994" target="_blank" rel="noopener">https://blog.csdn.net/x_i_y_u_e/article/details/51398994</a></p><p>【2】<a href="http://blog.csdn.net/chenchaofuck1/article/details/51660119" target="_blank" rel="noopener">http://blog.csdn.net/chenchaofuck1/article/details/51660119</a></p><p>【3】<a href="http://blog.csdn.net/ghsau/article/details/7481142" target="_blank" rel="noopener">http://blog.csdn.net/ghsau/article/details/7481142</a></p><p>作业题：区别：<strong>ArrayBlockingQueue</strong> 和 <strong>LinkedBlockingQueue</strong></p><p><strong>java中volatile关键字理解</strong></p><p>【1】<a href="https://blog.csdn.net/jackyqiziheng/article/details/73703278" target="_blank" rel="noopener">https://blog.csdn.net/jackyqiziheng/article/details/73703278</a></p><p>区别：</p><p>  一、volatile是变量修饰符，而synchronized则作用于一段代码或方法。</p><p> 二、volatile只是在线程内存和“主”内存间同步某个变量的值；而synchronized通过锁定和解锁某个监视器同步所有变量的值。显然synchronized要比volatile消耗更多资源</p><p>作业：volatile防止指令重排在单例模式的应用</p><h5 id="什么是竞争条件？你怎样发现和解决竞争？"><a href="#什么是竞争条件？你怎样发现和解决竞争？" class="headerlink" title="什么是竞争条件？你怎样发现和解决竞争？"></a><strong>什么是竞争条件？你怎样发现和解决竞争？</strong></h5><p>【1】<a href="http://blog.csdn.net/hourui93/article/details/48596259" target="_blank" rel="noopener">http://blog.csdn.net/hourui93/article/details/48596259</a></p><h5 id="你将如何使用thread-dump？你将如何分析Thread-dump"><a href="#你将如何使用thread-dump？你将如何分析Thread-dump" class="headerlink" title="你将如何使用thread dump？你将如何分析Thread dump"></a><strong>你将如何使用thread dump？你将如何分析Thread dump</strong></h5><p>【1】<a href="http://blog.csdn.net/rachel_luo/article/details/8920596" target="_blank" rel="noopener">http://blog.csdn.net/rachel_luo/article/details/8920596</a></p><h5 id="在Java中CycliBarriar和CountdownLatch有什么区别"><a href="#在Java中CycliBarriar和CountdownLatch有什么区别" class="headerlink" title="在Java中CycliBarriar和CountdownLatch有什么区别"></a><strong>在Java中CycliBarriar和CountdownLatch有什么区别</strong></h5><p>【1】<a href="http://blog.csdn.net/kjfcpua/article/details/7300286" target="_blank" rel="noopener">http://blog.csdn.net/kjfcpua/article/details/7300286</a></p><h5 id="Java并发编程-Executor框架集"><a href="#Java并发编程-Executor框架集" class="headerlink" title="Java并发编程-Executor框架集"></a><strong>Java并发编程-Executor框架集</strong></h5><p>【1】<a href="http://www.cnblogs.com/MOBIN/p/5436482.html" target="_blank" rel="noopener">http://www.cnblogs.com/MOBIN/p/5436482.html</a></p><h5 id="对象的四种引用类型"><a href="#对象的四种引用类型" class="headerlink" title="对象的四种引用类型"></a><strong>对象的四种引用类型</strong></h5><p>【1】<a href="http://www.cnblogs.com/Bob-FD/archive/2012/09/08/java.html" target="_blank" rel="noopener">http://www.cnblogs.com/Bob-FD/archive/2012/09/08/java.html</a></p><h5 id="Java中Atomic包的原理和分析"><a href="#Java中Atomic包的原理和分析" class="headerlink" title="Java中Atomic包的原理和分析"></a>Java中Atomic包的原理和分析</h5><p>【1】<a href="http://blog.csdn.net/tanga842428/article/details/52765537" target="_blank" rel="noopener">http://blog.csdn.net/tanga842428/article/details/52765537</a></p><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a><strong>Spring</strong></h3><p>【1】<a href="http://www.importnew.com/15851.html#ioc_di" target="_blank" rel="noopener">http://www.importnew.com/15851.html#ioc_di</a></p><p><strong>Spring好在哪里</strong></p><p> 轻量：Spring 是轻量的，基本的版本大约2MB。<br> 控制反转：Spring通过控制反转实现了松散耦合，对象们给出它们的依赖，而不是创建或查找依赖的对象们。<br> 面向切面的编程(AOP)：Spring支持面向切面的编程，并且把应用业务逻辑和系统服务分开。<br> 容器：Spring 包含并管理应用中对象的生命周期和配置。<br> MVC框架：Spring的WEB框架是个精心设计的框架，是Web框架的一个很好的替代品。<br> 事务管理：Spring 提供一个持续的事务管理接口，可以扩展到上至本地事务下至全局事务（JTA）。<br> 异常处理：Spring 提供方便的API把具体技术相关的异常（比如由JDBC，Hibernate or JDO抛出的）转化为一致的unchecked 异常。</p><h5 id="动态代理实现日志管理"><a href="#动态代理实现日志管理" class="headerlink" title="动态代理实现日志管理"></a><strong>动态代理实现日志管理</strong></h5><p>【1】<a href="https://blog.csdn.net/huangwenyi1010/article/details/51798353" target="_blank" rel="noopener">https://blog.csdn.net/huangwenyi1010/article/details/51798353</a></p><h5 id="Spring框架有哪些主要模块"><a href="#Spring框架有哪些主要模块" class="headerlink" title="Spring框架有哪些主要模块"></a>Spring框架有哪些主要模块</h5><p>【1】<a href="http://blog.knowsky.com/200197.htm" target="_blank" rel="noopener">http://blog.knowsky.com/200197.htm</a></p><h5 id="控制反转-IOC-？什么是依赖注入（DI）"><a href="#控制反转-IOC-？什么是依赖注入（DI）" class="headerlink" title="控制反转(IOC)？什么是依赖注入（DI）?"></a><strong>控制反转(IOC)？什么是依赖注入（DI）?</strong></h5><p>【1】<a href="https://blog.csdn.net/qq_22654611/article/details/52606960/" target="_blank" rel="noopener">https://blog.csdn.net/qq_22654611/article/details/52606960/</a></p><h5 id="IOC-DI-原理（重要）"><a href="#IOC-DI-原理（重要）" class="headerlink" title="IOC(DI)原理（重要）"></a><strong>IOC(DI)原理（重要）</strong></h5><p>【1】<a href="https://www.cnblogs.com/ITtangtang/p/3978349.html" target="_blank" rel="noopener">https://www.cnblogs.com/ITtangtang/p/3978349.html</a></p><h5 id="依然注入三种实现方式"><a href="#依然注入三种实现方式" class="headerlink" title="依然注入三种实现方式"></a><strong>依然注入三种实现方式</strong></h5><p><strong>FileSystemResource和ClassPathResource有何区别</strong></p><p>2种载入Spring配置文件的方式</p><p><strong>ClassPathXmlApplicationContext</strong>：从类路径ClassPath中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作，具体代码如下：</p><p> //装载单个配置文件实例化ApplicationContext容器</p><p>ApplicationContext cxt = newClassPathXmlApplicationContext(“applicationContext.xml”);</p><p>//装载多个配置文件实例化ApplicationContext容器</p><p>String[] configs ={“bean1.xml”,”bean2.xml”,”bean3.xml”};</p><p>ApplicationContext cxt = newClassPathXmlApplicationContext(configs);</p><p><strong>FileSystemXmlApplicationContext</strong>：从指定的文件系统路径中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。具体代码如下：</p><p>//装载单个配置文件实例化ApplicationContext容器</p><p>ApplicationContext cxt = newFileSystemXMLApplicationContext(“beans.xml”);</p><p>//装载多个配置文件实例化ApplicationContext容器</p><p>String[] configs ={“c:/beans1.xml”,”c:/beans2.xml”};</p><p>ApplicationContext cxt = newFileSystemXmlApplicationContext(configs);</p><p>XmlWebApplicationContext：从Web应用中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。这是为Web工程量身定制的，使用WebApplicationContextUtils类的getRequiredWebApplicationContext方法可在JSP与Servlet中取得IoC容器的引用。</p><h5 id="Spring-Bean作用域之间的区别"><a href="#Spring-Bean作用域之间的区别" class="headerlink" title="Spring Bean作用域之间的区别"></a><strong>Spring Bean作用域之间的区别</strong></h5><h5 id="Spring有几种配置方式"><a href="#Spring有几种配置方式" class="headerlink" title="Spring有几种配置方式"></a><strong>Spring有几种配置方式</strong></h5><ul><li>基于XML的配置</li><li>基于注解的配置</li><li>基于Java的配置</li></ul><h5 id="请解释Spring-Bean的生命周期"><a href="#请解释Spring-Bean的生命周期" class="headerlink" title="请解释Spring Bean的生命周期"></a><strong>请解释Spring Bean的生命周期</strong></h5><p>【1】<a href="https://www.cnblogs.com/zrtqsk/p/3735273.html" target="_blank" rel="noopener">https://www.cnblogs.com/zrtqsk/p/3735273.html</a></p><p>【2】<a href="https://blog.csdn.net/a327369238/article/details/52193822" target="_blank" rel="noopener">https://blog.csdn.net/a327369238/article/details/52193822</a></p><h5 id="自动装配模式的区别"><a href="#自动装配模式的区别" class="headerlink" title="自动装配模式的区别"></a><strong>自动装配模式的区别</strong></h5><h5 id="如何开启基于注解的自动装配"><a href="#如何开启基于注解的自动装配" class="headerlink" title="如何开启基于注解的自动装配"></a><strong>如何开启基于注解的自动装配</strong></h5><h5 id="Spring框架中有哪些不同类型的事件"><a href="#Spring框架中有哪些不同类型的事件" class="headerlink" title="Spring框架中有哪些不同类型的事件"></a><strong>Spring框架中有哪些不同类型的事件</strong></h5><p>【1】<a href="https://blog.csdn.net/u011063151/article/details/52036052" target="_blank" rel="noopener">https://blog.csdn.net/u011063151/article/details/52036052</a></p><h5 id="BeanFactory和ApplicationContext有什么区别"><a href="#BeanFactory和ApplicationContext有什么区别" class="headerlink" title="BeanFactory和ApplicationContext有什么区别"></a><strong>BeanFactory和ApplicationContext有什么区别</strong></h5><p>【1】<a href="http://youyu4.iteye.com/blog/2346183" target="_blank" rel="noopener">http://youyu4.iteye.com/blog/2346183</a></p><h5 id="三种较常见的-ApplicationContext-实现方式"><a href="#三种较常见的-ApplicationContext-实现方式" class="headerlink" title="三种较常见的 ApplicationContext 实现方式"></a><strong>三种较常见的 ApplicationContext 实现方式</strong></h5><ul><li>ClassPathXmlApplicationContext</li><li>FileSystemXmlApplicationContext</li><li>XmlWebApplicationContext</li></ul><h5 id="如何用基于Java配置的方式配置Spring"><a href="#如何用基于Java配置的方式配置Spring" class="headerlink" title="如何用基于Java配置的方式配置Spring"></a><strong>如何用基于Java配置的方式配置Spring</strong></h5><p>Spring对Java配置的支持是由@Configuration注解和@Bean注解来实现的。</p><h5 id="Spring中注入一个Java-Collection"><a href="#Spring中注入一个Java-Collection" class="headerlink" title="Spring中注入一个Java Collection"></a><strong>Spring中注入一个Java Collection</strong></h5><p><list> :   该标签用来装配可重复的list值。</list></p><p><set> :    该标签用来装配没有重复的set值。</set></p><p><map>:   该标签可用来注入键和值可以为任何类型的键值对。</map></p><p><props> : 该标签支持注入键和值都是字符串类型的键值对。</props></p><h5 id="FileSystemResource和ClassPathResource有何区别"><a href="#FileSystemResource和ClassPathResource有何区别" class="headerlink" title="FileSystemResource和ClassPathResource有何区别"></a><strong>FileSystemResource和ClassPathResource有何区别</strong></h5><h5 id="Spring-框架中都用到了哪些设计模式"><a href="#Spring-框架中都用到了哪些设计模式" class="headerlink" title="Spring 框架中都用到了哪些设计模式"></a><strong>Spring 框架中都用到了哪些设计模式</strong></h5><ul><li>代理模式—在AOP和remoting中被用的比较多。</li><li>单例模式—在spring配置文件中定义的bean默认为单例模式。</li><li>模板方法—用来解决代码重复的问题。比如. RestTemplate, JmsTemplate, JpaTemplate。</li><li>前端控制器—Spring提供了DispatcherServlet来对请求进行分发。</li><li>视图帮助(View Helper )—Spring提供了一系列的JSP标签，高效宏来辅助将分散的代码整合在视图里。</li><li>依赖注入—贯穿于BeanFactory / ApplicationContext接口的核心理念。</li><li>工厂模式—BeanFactory用来创建对象的实例。</li></ul><h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a><strong>SpringBoot</strong></h3><h3 id="Struts"><a href="#Struts" class="headerlink" title="Struts"></a><strong>Struts</strong></h3><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a><strong>Servlet</strong></h3><h5 id="Post，Get请求区别"><a href="#Post，Get请求区别" class="headerlink" title="Post，Get请求区别"></a><strong>Post，Get请求区别</strong></h5><p>【1】<a href="http://blog.csdn.net/yipiankongbai/article/details/24025633" target="_blank" rel="noopener">http://blog.csdn.net/yipiankongbai/article/details/24025633</a></p><h5 id="Session-Cookie区别"><a href="#Session-Cookie区别" class="headerlink" title="Session, Cookie区别"></a><strong>Session, Cookie区别</strong></h5><p>【1】<a href="http://blog.csdn.net/axin66ok/article/details/6175522" target="_blank" rel="noopener">http://blog.csdn.net/axin66ok/article/details/6175522</a></p><h5 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a><strong>Servlet的生命周期</strong></h5><p>【1】<a href="http://www.runoob.com/servlet/servlet-life-cycle.html" target="_blank" rel="noopener">http://www.runoob.com/servlet/servlet-life-cycle.html</a></p><h5 id="HTTP-报文包含内容"><a href="#HTTP-报文包含内容" class="headerlink" title="HTTP 报文包含内容"></a><strong>HTTP 报文包含内容</strong></h5><p>##### </p><p><strong>简述三次握手和四次挥手</strong></p><p>TCP是TCP/IP的第三层传输层，对应OSI的第四层传输层；<br>IP是TCP/IP的第二层互联层，对应OSI的第三层网络层。</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a><strong>数据库</strong></h3><h5 id="postgresql数据库比mysql好在哪里？"><a href="#postgresql数据库比mysql好在哪里？" class="headerlink" title="postgresql数据库比mysql好在哪里？"></a><strong>postgresql数据库比mysql好在哪里？</strong></h5><p>【1】<a href="http://www.cnblogs.com/zhangpengme/archive/2011/12/01/2271092.html" target="_blank" rel="noopener">http://www.cnblogs.com/zhangpengme/archive/2011/12/01/2271092.html</a></p><h5 id="数据库的左连接，右连接，内连接，外连接"><a href="#数据库的左连接，右连接，内连接，外连接" class="headerlink" title="数据库的左连接，右连接，内连接，外连接"></a><strong>数据库的左连接，右连接，内连接，外连接</strong></h5><p>【1】<a href="http://blog.csdn.net/zj972535075/article/details/50364813" target="_blank" rel="noopener">http://blog.csdn.net/zj972535075/article/details/50364813</a></p><h5 id="数据库四个范式"><a href="#数据库四个范式" class="headerlink" title="数据库四个范式"></a><strong>数据库四个范式</strong></h5><p>【1】<a href="https://blog.csdn.net/zymx14/article/details/69789326" target="_blank" rel="noopener">https://blog.csdn.net/zymx14/article/details/69789326</a></p><p>【2】<a href="http://blog.csdn.net/famousdt/article/details/6921622" target="_blank" rel="noopener">http://blog.csdn.net/famousdt/article/details/6921622</a><br>【3】<a href="http://www.jb51.net/article/19312.htm" target="_blank" rel="noopener">http://www.jb51.net/article/19312.htm</a></p><p>作业：第四种范式的学习</p><p><strong>qq：1512079179</strong></p><h5 id="数据库事务隔离级别"><a href="#数据库事务隔离级别" class="headerlink" title="数据库事务隔离级别"></a><strong>数据库事务隔离级别</strong></h5><p>四个事务隔离级别概念和脏读、不可重复读、幻读这几类问题的概念。</p><ul><li>Read uncommitted</li><li>Read committed</li><li>Repeatable read</li><li>Serializable<br>这四个级别可以逐个解决脏读、不可重复读、幻读这几类问题。</li></ul><p>【1】<a href="http://blog.csdn.net/fg2006/article/details/6937413" target="_blank" rel="noopener">http://blog.csdn.net/fg2006/article/details/6937413</a></p><h5 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a><strong>乐观锁和悲观锁</strong></h5><p>乐观锁和悲观锁的概念，乐观锁实现：第一种是使用版本号（hibernate乐观锁），第二种是使用时间戳。</p><p>【１】<a href="http://www.cnblogs.com/wang-meng/p/5506943.html" target="_blank" rel="noopener">http://www.cnblogs.com/wang-meng/p/5506943.html</a></p><h5 id="排他锁、共享锁"><a href="#排他锁、共享锁" class="headerlink" title="排他锁、共享锁"></a>排他锁、共享锁</h5><p>共享锁概念：<br><strong>注意：</strong>一个事务获取了共享锁，在其他查询中也只能加共享锁或不加锁。</p><p>排他锁概念：<br><strong>注意：</strong>排他锁指的是一个事务在一行数据加上排他锁后，其他事务不能再在其上加其他的锁。</p><p><strong>注意：</strong>排他锁与共享锁不能存在同一数据上。</p><p>【1】<a href="http://blog.csdn.net/c466254931/article/details/53463596" target="_blank" rel="noopener">http://blog.csdn.net/c466254931/article/details/53463596</a></p><h5 id="数据库索引类型及实现方式（重要）"><a href="#数据库索引类型及实现方式（重要）" class="headerlink" title="数据库索引类型及实现方式（重要）"></a><strong>数据库索引类型及实现方式（重要）</strong></h5><p><strong>索引的优缺点:</strong></p><p>唯一索引：   UNIQUE<br>主键索引：   primary key<br>聚集索引（也叫聚簇索引）：cluster <strong>概念</strong>等等</p><p>【1】<a href="http://www.cnblogs.com/barrywxx/p/4351901.html" target="_blank" rel="noopener">http://www.cnblogs.com/barrywxx/p/4351901.html</a></p><p>【2】<a href="https://blog.csdn.net/zc474235918/article/details/50580639" target="_blank" rel="noopener">https://blog.csdn.net/zc474235918/article/details/50580639</a></p><p>【2】<a href="http://www.cnblogs.com/terryglp/articles/2450197.html" target="_blank" rel="noopener">http://www.cnblogs.com/terryglp/articles/2450197.html</a></p><p>作业：聚集索引与非聚集索引的对比和学习。</p><p> <strong>SQL单一索引与联合索引区别:</strong></p><p>【1】<a href="http://blog.csdn.net/shellching/article/details/7655793" target="_blank" rel="noopener">http://blog.csdn.net/shellching/article/details/7655793</a></p><p>作业：为什么联合索引快或者联合索引的原理是什么？</p><p><strong>索引的实现方式：</strong></p><ul><li>B+树</li><li>散列索引</li><li>位图索引：位图索引是一种针对多个字段的简单查询设计一种特殊的索引，适用范围比较小，<strong>只适用于字段值固定并且值的种类很少的情况，比如性别，只能有男和女，或者级别，状态等等，并且只有在同时对多个这样的字段查询时才能体现出位图的优势</strong>。</li></ul><p>【1】<a href="https://blog.csdn.net/sdgihshdv/article/details/75039825" target="_blank" rel="noopener">https://blog.csdn.net/sdgihshdv/article/details/75039825</a></p><h5 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a><strong>SQL优化</strong></h5><p>1）explain语句</p><p>2）SQL语句的优化</p><p>3）索引</p><p>【1】<a href="https://blog.csdn.net/huangwenyi1010/article/details/72673447" target="_blank" rel="noopener">https://blog.csdn.net/huangwenyi1010/article/details/72673447</a></p><p>作业：分库、分表</p><p>qq：<a href="mailto:1512079179@qq.com" target="_blank" rel="noopener">1512079179@qq.com</a></p><h5 id="执行计划"><a href="#执行计划" class="headerlink" title="执行计划"></a><strong>执行计划</strong></h5><p>explain语句</p><p>【1】<a href="http://toplchx.iteye.com/blog/2091860" target="_blank" rel="noopener">http://toplchx.iteye.com/blog/2091860</a></p><h5 id="事务4大特性"><a href="#事务4大特性" class="headerlink" title="事务4大特性"></a><strong>事务4大特性</strong></h5><ul><li>原子性(Atomicity)</li><li>一致性(Consistency)    </li><li>分离性(亦称独立性Isolation)</li><li>持久性(Durability)</li></ul><p>原子性(Atomicity)：要么全部执行，要么完全不执行</p><p>一致性(Consistency) 实例：拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</p><p>【1】<a href="http://www.cnblogs.com/fjdingsd/p/5273008.html" target="_blank" rel="noopener">http://www.cnblogs.com/fjdingsd/p/5273008.html</a></p><h5 id="在1亿条用户记录里，如何快速查询统计出看了5个电影以上的用户？"><a href="#在1亿条用户记录里，如何快速查询统计出看了5个电影以上的用户？" class="headerlink" title="在1亿条用户记录里，如何快速查询统计出看了5个电影以上的用户？"></a><strong>在1亿条用户记录里，如何快速查询统计出看了5个电影以上的用户？</strong></h5><ul><li>办法一，建立分区表，按照用户浏览的记录数进行分区。</li><li>办法二，单独建立一张表，存放这样的信息。这张表就两个列，用户id和浏览量，这种思想叫冗余表。但是需要注意的是冗余表的建立，可以大幅提供效率，但会增加数据库维护的成本，需要综合考虑是否合适。</li><li>办法三，使用mongodb这样的nosql数据库。mongodb是一个文档型的nosql数据库，创建表的时候，增加两个列，一个保存浏览量，一个保存具体的浏览记录。这种方式跟冗余表的思想是一样的</li></ul><p>【1】<a href="http://blog.csdn.net/lgb934/article/details/8662956" target="_blank" rel="noopener">http://blog.csdn.net/lgb934/article/details/8662956</a></p><h5 id="关于数据库where和having的区别，执行顺序、group-by-与having如何使用（重要）"><a href="#关于数据库where和having的区别，执行顺序、group-by-与having如何使用（重要）" class="headerlink" title="关于数据库where和having的区别，执行顺序、group by 与having如何使用（重要）"></a><strong>关于数据库where和having的区别，执行顺序、group by 与having如何使用（重要）</strong></h5><p>【1】<a href="http://blog.csdn.net/my773962804/article/details/51538790?_t_t_t=0.17189185717143118" target="_blank" rel="noopener">http://blog.csdn.net/my773962804/article/details/51538790?_t_t_t=0.17189185717143118</a></p><p>【2】<a href="https://blog.csdn.net/bingogirl/article/details/52559302" target="_blank" rel="noopener">https://blog.csdn.net/bingogirl/article/details/52559302</a></p><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a><strong>Redis</strong></h3><h5 id="分布式锁的实现（重要）"><a href="#分布式锁的实现（重要）" class="headerlink" title="分布式锁的实现（重要）"></a><strong>分布式锁的实现（重要）</strong></h5><p>【1】<a href="https://my.oschina.net/u/1995545/blog/366381" target="_blank" rel="noopener">https://my.oschina.net/u/1995545/blog/366381</a></p><p>作业：setNX内部的实现原理</p><p>qq：<a href="mailto:1512079179@qq.com" target="_blank" rel="noopener">1512079179@qq.com</a></p><h5 id="5种数据类型"><a href="#5种数据类型" class="headerlink" title="5种数据类型"></a><strong>5种数据类型</strong></h5><ul><li>全局key操作</li><li>String（字符串）</li><li>Hashes类型:(map)</li><li>List类型</li><li>set类型</li><li>Sorted-Sets类型</li></ul><p>【1】<a href="http://blog.csdn.net/huangwenyi1010/article/details/51354188" target="_blank" rel="noopener">http://blog.csdn.net/huangwenyi1010/article/details/51354188</a></p><h5 id="Redis两种持久化方式及原理"><a href="#Redis两种持久化方式及原理" class="headerlink" title="Redis两种持久化方式及原理"></a><strong>Redis两种持久化方式及原理</strong></h5><p><strong>Redis的持久化策略：</strong><br>rdb:快照形式是直接把内存中的数据保存到一个dump文件中，定时保存，保存策略<br>aof：把所有的对redis的服务器进行修改的命令都存到一个文件里，命令的集合</p><p>【1】<a href="http://blog.csdn.net/u010785685/article/details/52366977" target="_blank" rel="noopener">http://blog.csdn.net/u010785685/article/details/52366977</a></p><h5 id="Redis与Memcache区别"><a href="#Redis与Memcache区别" class="headerlink" title="Redis与Memcache区别"></a><strong>Redis与Memcache区别</strong></h5><p>redis和memecache的不同在于：</p><ul><li><p>存储方式：<br>  memecache 把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小</p><p>  redis有部份存在硬盘上，这样能保证数据的持久性，支持数据的持久化（笔者注：有快照和AOF日志两种持久化方式，在实际应用的时候，要特别注意配置文件快照参数，要不就很有可能服务器频繁满载做dump）。</p></li><li><p>数据支持类型：<br>  redis在数据支持上要比memecache多的多。</p><p>  ​</p></li></ul><ul><li><p>应用场景不一样：</p><p>Redis除了作为NoSQL数据库使用外，还能用做消息队列、数据堆栈和数据缓存等；Memcached适合于缓存SQL语句、数据集、用户临时性数据、延迟查询数据和session等。</p></li></ul><p>Redis和Memcache都是将数据存放在内存中，都是内存数据库。不过memcache还可用于缓存其他东西，例如图片、视频等等；  </p><p>Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，hash等数据结构的存储；  </p><p>虚拟内存–Redis当物理内存用完时，可以将一些很久没用到的value 交换到磁盘；  </p><p>过期策略–memcache在set时就指定，例如set key1 0 0 8,即永不过期。Redis可以通过例如expire 设定，例如expire name 10；  </p><p>分布式–设定memcache集群，利用magent做一主多从;redis可以做一主多从，也都可以一主一从；  </p><p>存储数据安全–memcache挂掉后，数据没了；redis可以定期保存到磁盘（持久化）；  </p><p>灾难恢复–memcache挂掉后，数据不可恢复; redis数据丢失后可以通过aof恢复；  </p><p>Redis支持数据的备份，即master-slave模式的数据备份；  </p><p>【1】<a href="http://blog.csdn.net/sunmenggmail/article/details/36176029" target="_blank" rel="noopener">http://blog.csdn.net/sunmenggmail/article/details/36176029</a></p><h5 id="redis是多线程还是单线程"><a href="#redis是多线程还是单线程" class="headerlink" title="redis是多线程还是单线程"></a>redis是多线程还是单线程</h5><p>驴妈妈旅游网上的面试题</p><p>【2】<a href="http://www.cnblogs.com/yuyutianxia/p/6346723.html" target="_blank" rel="noopener">http://www.cnblogs.com/yuyutianxia/p/6346723.html</a></p><p>【1】<a href="http://www.cnblogs.com/syyong/p/6231326.html" target="_blank" rel="noopener">http://www.cnblogs.com/syyong/p/6231326.html</a></p><p>Redis采用的是基于内存的采用的是单进程单线程模型的KV数据库，由C语言编写。官方提供的数据是可以达到100000+的qps。这个数据不比采用单进程多线程的同样基于内存的KV数据库Memcached差。</p><h3 id="单进程单线程好处"><a href="#单进程单线程好处" class="headerlink" title="单进程单线程好处"></a>单进程单线程好处</h3><ol><li>代码更清晰，处理逻辑更简单</li><li>不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗</li><li>不存在多进程或者多线程导致的切换而消耗CPU</li></ol><h3 id="单进程单线程弊端"><a href="#单进程单线程弊端" class="headerlink" title="单进程单线程弊端"></a>单进程单线程弊端</h3><ol><li>无法发挥多核CPU性能，不过可以通过在单机开多个Redis实例来完善；</li></ol><h5 id="redis订阅-发布"><a href="#redis订阅-发布" class="headerlink" title="redis订阅/发布"></a><strong>redis订阅/发布</strong></h5><p>【1】<a href="http://blog.csdn.net/huangwenyi1010/article/details/51376197" target="_blank" rel="noopener">http://blog.csdn.net/huangwenyi1010/article/details/51376197</a></p><p>redis  订阅/发布 应用场景</p><h5 id="redis分布式（主从模式）"><a href="#redis分布式（主从模式）" class="headerlink" title="redis分布式（主从模式）**"></a>redis分布式（主从模式）**</h5><p>【1】<a href="https://www.cnblogs.com/dtiove/p/5842013.html" target="_blank" rel="noopener">https://www.cnblogs.com/dtiove/p/5842013.html</a></p><p>【2】<a href="https://blog.csdn.net/donggang1992/article/details/50981341" target="_blank" rel="noopener">https://blog.csdn.net/donggang1992/article/details/50981341</a></p><p><strong>redis实现消息队列</strong></p><p>【1】<a href="http://www.runoob.com/redis/redis-lists.html" target="_blank" rel="noopener">http://www.runoob.com/redis/redis-lists.html</a></p><p>【2】<a href="https://blog.csdn.net/ZuoAnYinXiang/article/details/50263945" target="_blank" rel="noopener">https://blog.csdn.net/ZuoAnYinXiang/article/details/50263945</a></p><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a><strong>设计模式</strong></h3><h5 id="门面模式的解释，适用场合"><a href="#门面模式的解释，适用场合" class="headerlink" title="门面模式的解释，适用场合"></a><strong>门面模式的解释，适用场合</strong></h5><p>【1】<a href="http://www.cnblogs.com/lthIU/p/5860607.html" target="_blank" rel="noopener">http://www.cnblogs.com/lthIU/p/5860607.html</a></p><h3 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a><strong>Hibernate</strong></h3><p><strong>Hibernate工作原理</strong></p><p>【1】<a href="https://blog.csdn.net/huangwenyi1010/article/details/68923405" target="_blank" rel="noopener">https://blog.csdn.net/huangwenyi1010/article/details/68923405</a></p><p><strong>Hibernate的3种对象状态</strong></p><p>【1】<a href="https://blog.csdn.net/huangwenyi1010/article/details/68923405" target="_blank" rel="noopener">https://blog.csdn.net/huangwenyi1010/article/details/68923405</a></p><p><strong>Hibernate四种查询</strong></p><p>【1】<a href="https://blog.csdn.net/huangwenyi1010/article/details/68923405" target="_blank" rel="noopener">https://blog.csdn.net/huangwenyi1010/article/details/68923405</a></p><h3 id="JVM虚拟机"><a href="#JVM虚拟机" class="headerlink" title="JVM虚拟机"></a><strong>JVM虚拟机</strong></h3><p>JVM虚拟机内存模型</p><p>堆内存模型</p><p>【1】<a href="http://www.cnblogs.com/AloneSword/p/4262255.html" target="_blank" rel="noopener">http://www.cnblogs.com/AloneSword/p/4262255.html</a></p><p><strong>垃圾回收算法：（重要）</strong></p><ul><li>引用计数算法</li><li>根搜索算法</li><li>标记-清除算法</li><li>标记-整理算法</li><li>分代收集算法</li><li>CMS算法：Concurrent Mark Sweep/CMS是一款并发、使用标记-清除算法的gc。（<a href="http://www.cnblogs.com/Leo_wl/p/5393300.html" target="_blank" rel="noopener">http://www.cnblogs.com/Leo_wl/p/5393300.html</a> 或者 <a href="http://blog.csdn.net/aibisoft/article/details/27555793）" target="_blank" rel="noopener">http://blog.csdn.net/aibisoft/article/details/27555793）</a></li></ul><p>【1】<a href="https://blog.csdn.net/wen7280/article/details/54428387" target="_blank" rel="noopener">https://blog.csdn.net/wen7280/article/details/54428387</a></p><h3 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a><strong>Linux常用命令</strong></h3><h5 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a><strong>基础命令</strong></h5><p>【1】<a href="http://www.cnblogs.com/laov/p/3541414.html" target="_blank" rel="noopener">http://www.cnblogs.com/laov/p/3541414.html</a></p><ul><li>回答基本的常用命令</li><li>回答具体的使用场景，比如你经常在linux下安装tomcat，jdk，redis，或者说用linux搭建一些集群环境。</li><li>回答一些高深的命令，比如管道命令</li></ul><h5 id="管道命令"><a href="#管道命令" class="headerlink" title="管道命令"></a><strong>管道命令</strong></h5><p>【1】<a href="http://www.cnblogs.com/mrzero/p/3985302.html" target="_blank" rel="noopener">http://www.cnblogs.com/mrzero/p/3985302.html</a></p><p>【2】<a href="http://blog.csdn.net/morning99/article/details/23753851" target="_blank" rel="noopener">http://blog.csdn.net/morning99/article/details/23753851</a></p><p>【3】<a href="http://blog.csdn.net/lgstudyvc/article/details/51916268" target="_blank" rel="noopener">http://blog.csdn.net/lgstudyvc/article/details/51916268</a></p><p>管道符号，是unix功能强大的一个地方,符号是一条竖线:”|”，</p><p>用法: command 1 | command 2 他的功能是把第一个命令command 1执行的结果作为command 2的输入传给command 2，</p><p>例如:</p><p>​    ls -l | more</p><p>该命令列出当前目录中的任何文档，并把输出送给more命令作为输入，more命令分页显示文件列表。</p><p>又如 </p><p>​    rpm -aq | less</p><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a><strong>Tomcat</strong></h3><h5 id="Tomcat性能调优"><a href="#Tomcat性能调优" class="headerlink" title="Tomcat性能调优"></a><strong>Tomcat性能调优</strong></h5><ul><li>JVM参数调优</li><li>NIO协议</li><li>线程池和连接数配置</li><li>禁用AJP协议</li></ul><h5 id="Tomcat启动时加载数据到缓存"><a href="#Tomcat启动时加载数据到缓存" class="headerlink" title="Tomcat启动时加载数据到缓存"></a><strong>Tomcat启动时加载数据到缓存</strong></h5><p>【1】<a href="http://lilinhui.iteye.com/blog/808816" target="_blank" rel="noopener">http://lilinhui.iteye.com/blog/808816</a></p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a><strong>Git</strong></h3><h5 id="git如何回退到某个历史版本"><a href="#git如何回退到某个历史版本" class="headerlink" title="git如何回退到某个历史版本"></a><strong>git如何回退到某个历史版本</strong></h5><p>【1】<a href="http://blog.csdn.net/newjueqi/article/details/49098123" target="_blank" rel="noopener">http://blog.csdn.net/newjueqi/article/details/49098123</a></p><h5 id="SVN和Git优缺点比较"><a href="#SVN和Git优缺点比较" class="headerlink" title="SVN和Git优缺点比较"></a><strong>SVN和Git优缺点比较</strong></h5><p>【1】<a href="http://blog.csdn.net/yuwq123/article/details/52748009" target="_blank" rel="noopener">http://blog.csdn.net/yuwq123/article/details/52748009</a></p><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a><strong>JDBC</strong></h3><h5 id="Statement与PreparedStatement的区别"><a href="#Statement与PreparedStatement的区别" class="headerlink" title="Statement与PreparedStatement的区别?"></a><strong>Statement与PreparedStatement的区别?</strong></h5><p>【1】<a href="http://blog.csdn.net/haorengoodman/article/details/23995347" target="_blank" rel="noopener">http://blog.csdn.net/haorengoodman/article/details/23995347</a></p><ul><li><p>创建时的区别： </p><p>​Statement statement = conn.createStatement();</p><p>​    PreparedStatement preStatement = conn.prepareStatement(sql);</p></li></ul><p>​<br>执行的时候: </p><p>​    ResultSet rSet = statement.executeQuery(sql);</p><p>​    ResultSet pSet = preStatement.executeQuery();</p><p>由上可以看出，PreparedStatement有预编译的过程，已经绑定sql，之后无论执行多少遍，都不会再去进行编译，而 statement 不同，如果执行多变，则相应的就要编译多少遍sql，所以从这点看，preStatement 的效率会比 Statement要高一些。所以总体而言， 验证  preStatement 的效率 比 Statement 的效率高</p><ul><li>安全性问题</li></ul><p>preStatement是预编译的，所以可以有效的防止 SQL注入等问题。所以 preStatement 的安全性 比 Statement 高</p><ul><li>代码的可读性 和 可维护性 </li></ul><p>这点也不用多说了，你看老代码的时候  会深有体会preStatement更胜一筹</p><h3 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a><strong>MyBatis</strong></h3><h5 id="MyBatis如何唯一标识一个SQL语句"><a href="#MyBatis如何唯一标识一个SQL语句" class="headerlink" title="MyBatis如何唯一标识一个SQL语句"></a><strong>MyBatis如何唯一标识一个SQL语句</strong></h5><h5 id="Hibernate和MyBatis如何映射一对多关系"><a href="#Hibernate和MyBatis如何映射一对多关系" class="headerlink" title="Hibernate和MyBatis如何映射一对多关系"></a><strong>Hibernate和MyBatis如何映射一对多关系</strong></h5><p>【1】<a href="http://www.cnblogs.com/liujiayun/p/5814158.html" target="_blank" rel="noopener">http://www.cnblogs.com/liujiayun/p/5814158.html</a></p><p>【2】<a href="http://blog.csdn.net/suwu150/article/details/52896459" target="_blank" rel="noopener">http://blog.csdn.net/suwu150/article/details/52896459</a></p><h3 id="前端"><a href="#前端" class="headerlink" title="前端**"></a>前端**</h3><h5 id="ajax原理"><a href="#ajax原理" class="headerlink" title="ajax原理"></a><strong>ajax原理</strong></h5><p>【1】<a href="http://www.cnblogs.com/mingmingruyuedlut/archive/2011/10/18/2216553.html" target="_blank" rel="noopener">http://www.cnblogs.com/mingmingruyuedlut/archive/2011/10/18/2216553.html</a></p><h3 id="算法面试题"><a href="#算法面试题" class="headerlink" title="算法面试题"></a><strong>算法面试题</strong></h3><p>现在有1000瓶药水，其中至多有1瓶是有剧毒的，现在给你10只狗，在24小时内通过小狗试药的方式，</p><p>找出那些药有毒或者全部没毒（小狗服完药20小时之后才能判断是否中毒）。</p><p>【1】<a href="http://blog.csdn.net/sancho_lai/article/details/3218786" target="_blank" rel="noopener">http://blog.csdn.net/sancho_lai/article/details/3218786</a></p><h3 id="数据库分库分表（重要）"><a href="#数据库分库分表（重要）" class="headerlink" title="数据库分库分表（重要）"></a>数据库分库分表（重要）</h3><p>垂直和水平</p><p>下面是笔者整理的jdk自带的常用命令行工具的使用方法，全部原创，转载请注明出处，并贴上链接，谢谢！</p><ul><li><a href="http://blog.csdn.net/winwill2012/article/details/46319033" target="_blank" rel="noopener"><strong>jps命令使用</strong></a></li><li><a href="http://blog.csdn.net/winwill2012/article/details/46319355" target="_blank" rel="noopener"><strong>jstat命令使用</strong></a></li><li><a href="http://blog.csdn.net/winwill2012/article/details/46336839" target="_blank" rel="noopener"><strong>jinfo命令使用</strong></a></li><li><a href="http://blog.csdn.net/winwill2012/article/details/46337339" target="_blank" rel="noopener"><strong>jmap命令使用</strong></a></li><li><a href="http://blog.csdn.net/winwill2012/article/details/46337535" target="_blank" rel="noopener"><strong>jhat命令使用</strong></a></li><li><a href="http://blog.csdn.net/winwill2012/article/details/46364339" target="_blank" rel="noopener"><strong>jstack命令使用</strong></a></li><li><a href="http://blog.csdn.net/winwill2012/article/details/46364849" target="_blank" rel="noopener"><strong>jcmd命令使用</strong></a></li></ul><h3 id="后台系统怎么防止请求重复提交"><a href="#后台系统怎么防止请求重复提交" class="headerlink" title="后台系统怎么防止请求重复提交"></a><strong>后台系统怎么防止请求重复提交</strong></h3><p>【1】<a href="http://blog.csdn.net/hshl1214/article/details/46635905" target="_blank" rel="noopener">http://blog.csdn.net/hshl1214/article/details/46635905</a></p><h3 id="有没有有顺序的Map-实现类，如果有，他们是怎么保证有序的。"><a href="#有没有有顺序的Map-实现类，如果有，他们是怎么保证有序的。" class="headerlink" title="有没有有顺序的Map 实现类，如果有，他们是怎么保证有序的。"></a><strong>有没有有顺序的Map 实现类，如果有，他们是怎么保证有序的。</strong></h3><p>【1】<a href="http://www.cnblogs.com/children/archive/2012/10/02/2710624.html" target="_blank" rel="noopener">http://www.cnblogs.com/children/archive/2012/10/02/2710624.html</a></p><h3 id="反射中，Class-forName-和-ClassLoader-区别"><a href="#反射中，Class-forName-和-ClassLoader-区别" class="headerlink" title="反射中，Class.forName 和 ClassLoader 区别"></a><strong>反射中，Class.forName 和 ClassLoader 区别</strong></h3><h3 id="描述动态代理的几种实现方式，分别说出相应的优缺点。"><a href="#描述动态代理的几种实现方式，分别说出相应的优缺点。" class="headerlink" title="描述动态代理的几种实现方式，分别说出相应的优缺点。"></a><strong>描述动态代理的几种实现方式，分别说出相应的优缺点。</strong></h3><p>【1】<a href="http://blog.csdn.net/kyi_zhu123/article/details/52644624" target="_blank" rel="noopener">http://blog.csdn.net/kyi_zhu123/article/details/52644624</a></p><h3 id="在自己的代码中，如果创建一个-java-lang-String-对象，这个对象是否可以被类加载器加载？为什么。"><a href="#在自己的代码中，如果创建一个-java-lang-String-对象，这个对象是否可以被类加载器加载？为什么。" class="headerlink" title="在自己的代码中，如果创建一个 java.lang.String 对象，这个对象是否可以被类加载器加载？为什么。"></a><strong>在自己的代码中，如果创建一个 java.lang.String 对象，这个对象是否可以被类加载器加载？为什么。</strong></h3><ol><li><a href="http://blog.csdn.net/bbirdsky/article/details/8283143" target="_blank" rel="noopener">http://blog.csdn.net/bbirdsky/article/details/8283143</a>  </li><li>字符串类(Java.lang.String)是Java中使用最多的类，也是最为特殊的一个类，很多时候，我们对它既熟悉又陌生。在很多面试题中经常用String大做文章，只要掌握了String特性，对付它们就不再是困难了。  </li><li>1、从根本上认识java.lang.String类和String池  </li><li>首先，我建议先看看String类的源码实现，这是从本质上认识String类的根本出发点。  </li><li>从源码中可以看到：  </li><li>String类是final的，不可被继承。public final class String。  </li><li>String类是的本质是字符数组char[], 并且其值不可改变。private final char value[];  </li><li>​</li><li>然后打开String类的API文档，从API中可以发现：  </li><li>String类对象有个特殊的创建的方式，就是直接指定比如String x = “abc”，”abc”就表示一个字符串对象。而x是”abc”对象的地址，也叫做”abc”对象的引用。  </li><li>String对象可以通过“+”串联。串联后会生成新的字符串。也可以通过concat()来串联，这个后面会讲述。  </li><li>Java运行时会维护一个String Pool（String池），JavaDoc翻译很模糊“字符串缓冲区”。String池用来存放运行时中产生的各种字符串，并且池中的字符串的内容不重复。而一般对象不存在这个缓冲池，并且创建的对象仅仅存在于方法的堆栈区。  </li><li>​</li><li>2、创建字符串的方式  </li><li>创建字符串的方式很多，归纳起来有三类：  </li><li>使用new关键字创建字符串，比如String s1 = new String(“abc”);  </li><li>直接指定。比如String s2 = “abc”;  </li><li>使用串联生成新的字符串。比如String s3 = “ab” + “c”。  </li><li>​</li><li>3、String对象的创建的特性  </li><li>String对象的创建也很讲究，关键是要明白其原理。  </li><li>​</li><li>特性1：  </li><li>当使用任何方式来创建一个字符串对象s时，Java运行时（运行中JVM）会拿着这个字符串的内容在String池中找是否存在内容相同的字符串对象，如果不存在，则在池中创建一个字符串s，否则，不在池中添加。  </li><li>​</li><li>特性2：  </li><li>Java中，只要使用new关键字来创建对象，则一定会（在堆区或栈区）创建一个新的对象。  </li><li>​</li><li>特性3：  </li><li>使用直接指定、使用纯字符串串联或者在编译期间可以确定结果的变量表达式来创建String对象，则仅仅会检查维护String池中的字符串，池中没有就在池中创建一个，有则罢了！但绝不会在堆栈区再去创建该String对象；  </li><li>1、 直接指定，例如：下面代码运行结果为true；  </li><li>String str1 = “abc”;  </li><li>String str2 = “abc”;  </li><li>System.out.println(str1 == str2);  </li><li>2、 使用纯字符串串联，例如：下面代码运行结果为true；  </li><li>String str1 = “abc”;  </li><li>String str2 = “ab” + “c”;  </li><li>System.out.println(str1 == str2);  </li><li>3、 在编译期间可以确定结果的变量表达式，例如：下面代码运行结果为true。  </li><li>final String str1 = “c”; //final类型的变量在编译时当常量处理  </li><li>String str2 = “ab” + “c”;  </li><li>String str3 = “ab” + str1;  </li><li>System.out.println(str2==str3);  </li><li>​</li><li>否则使用包含编译期间无法确定结果的变量的表达式来创建String对象，则不仅会检查维护String池，而且还会在堆栈区创建一个String（由StringBuilder.toString()生成）对象。  </li><li>1、普通变量表达式进行创建字符串，例如：下面代码运行结果为false；  </li><li>String str1 = “c”;  </li><li>String str2 = “ab” + “c”;  </li><li>String str3 = “ab” + str1;  </li><li>System.out.println(str2==str3);  </li></ol><h3 id="人事问题（补充）"><a href="#人事问题（补充）" class="headerlink" title="人事问题（补充）"></a><strong>人事问题（补充）</strong></h3><p>在面试过程中，当你技术面试过关之后，通常会有一个HR面试，一般到这里说明你基本已经通过了面试，但是你还是不能松懈的，这一面也是不容小觑的。比如HR经常会问你这些问题：</p><ul><li>你为什么要离职啊？</li><li>你对我们公司还有什么要了解的吗？</li><li>你能支持经常出差吗？或者能支持经常加班吗？</li><li>你上一家公司的薪资是多少？</li><li>你手里拿到多少个offer了？</li><li>如果我们公司的薪资达不到你的要求，你会考虑留下来吗？</li><li>等等一系列的问题。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;历时两周，呕心沥血整理而成，良心之作！！翻遍各大站点、公众号总结出的最常问的99个问题。大部分都是把网上最好的答案网址直接粘贴过来，适合准备面试的人复习之用！！！&lt;/p&gt;
&lt;h3 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java多线程问题总结</title>
    <link href="http://yoursite.com/2018/06/06/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/06/06/Java多线程问题总结/</id>
    <published>2018-06-06T03:47:03.938Z</published>
    <updated>2018-06-06T03:46:47.269Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1、多线程有什么用？</strong></p><p>一个可能在很多人看来很扯淡的一个问题：我会用多线程就好了，还管它有什么用？在我看来，这个回答更扯淡。所谓”知其然知其所以然”，”会用”只是”知其然”，”为什么用”才是”知其所以然”，只有达到”知其然知其所以然”的程度才可以说是把一个知识点运用自如。OK，下面说说我对这个问题的看法：</p><p>（1）发挥多核CPU的优势</p><p>随着工业的进步，现在的笔记本、台式机乃至商用的应用服务器至少也都是双核的，4核、8核甚至16核的也都不少见，如果是单线程的程序，那么在双核CPU上就浪费了50%，在4核CPU上就浪费了75%。<strong>单核CPU上所谓的”多线程”那是假的多线程，同一时间处理器只会处理一段逻辑，只不过线程之间切换得比较快，看着像多个线程”同时”运行罢了</strong>。多核CPU上的多线程才是真正的多线程，它能让你的多段逻辑同时工作，多线程，可以真正发挥出多核CPU的优势来，达到充分利用CPU的目的。</p><p>（2）防止阻塞</p><p>从程序运行效率的角度来看，单核CPU不但不会发挥出多线程的优势，反而会因为在单核CPU上运行多线程导致线程上下文的切换，而降低程序整体的效率。但是单核CPU我们还是要应用多线程，就是为了防止阻塞。试想，如果单核CPU使用单线程，那么只要这个线程阻塞了，比方说远程读取某个数据吧，对端迟迟未返回又没有设置超时时间，那么你的整个程序在数据返回回来之前就停止运行了。多线程可以防止这个问题，多条线程同时运行，哪怕一条线程的代码执行读取数据阻塞，也不会影响其它任务的执行。</p><p>（3）便于建模</p><p>这是另外一个没有这么明显的优点了。假设有一个大的任务A，单线程编程，那么就要考虑很多，建立整个程序模型比较麻烦。但是如果把这个大的任务A分解成几个小任务，任务B、任务C、任务D，分别建立程序模型，并通过多线程分别运行这几个任务，那就简单很多了。</p><p><strong>2、创建线程的方式</strong></p><p>比较常见的一个问题了，一般就是两种：</p><p>（1）继承Thread类</p><p>（2）实现Runnable接口</p><p>至于哪个好，不用说肯定是后者好，因为实现接口的方式比继承类的方式更灵活，也能减少程序之间的耦合度，<strong>面向接口编程</strong>也是设计模式6大原则的核心。</p><p><strong>3、start()方法和run()方法的区别</strong></p><p>只有调用了start()方法，才会表现出多线程的特性，不同线程的run()方法里面的代码交替执行。如果只是调用run()方法，那么代码还是同步执行的，必须等待一个线程的run()方法里面的代码全部执行完毕之后，另外一个线程才可以执行其run()方法里面的代码。</p><p><strong>4、Runnable接口和Callable接口的区别</strong></p><p>有点深的问题了，也看出一个Java程序员学习知识的广度。</p><p>Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。</p><p>这其实是很有用的一个特性，因为<strong>多线程相比单线程更难、更复杂的一个重要原因就是因为多线程充满着未知性</strong>，某条线程是否执行了？某条线程执行了多久？某条线程执行的时候我们期望的数据是否已经赋值完毕？无法得知，我们能做的只是等待这条多线程的任务执行完毕而已。而Callable+Future/FutureTask却可以获取多线程运行的结果，可以在等待时间太长没获取到需要的数据的情况下取消该线程的任务，真的是非常有用。</p><p><strong>5、CyclicBarrier和CountDownLatch的区别</strong></p><p>两个看上去有点像的类，都在java.util.concurrent下，都可以用来表示代码运行到某个点上，二者的区别在于：</p><p>（1）CyclicBarrier的某个线程运行到某个点上之后，该线程即停止运行，直到所有的线程都到达了这个点，所有线程才重新运行；CountDownLatch则不是，某线程运行到某个点上之后，只是给某个数值-1而已，该线程继续运行</p><p>（2）CyclicBarrier只能唤起一个任务，CountDownLatch可以唤起多个任务</p><p>（3）CyclicBarrier可重用，CountDownLatch不可重用，计数值为0该CountDownLatch就不可再用了</p><p><strong>6、volatile关键字的作用</strong></p><p>一个非常重要的问题，是每个学习、应用多线程的Java程序员都必须掌握的。理解volatile关键字的作用的前提是要理解Java内存模型，这里就不讲Java内存模型了，可以参见第31点，volatile关键字的作用主要有两个：</p><p>（1）多线程主要围绕可见性和原子性两个特性而展开，使用volatile关键字修饰的变量，保证了其在多线程之间的可见性，即每次读取到volatile变量，一定是最新的数据</p><p>（2）代码底层执行不像我们看到的高级语言—-Java程序这么简单，它的执行是<strong>Java代码–&gt;字节码–&gt;根据字节码执行对应的C/C++代码–&gt;C/C++代码被编译成汇编语言–&gt;和硬件电路交互</strong>，现实中，为了获取更好的性能JVM可能会对指令进行重排序，多线程下可能会出现一些意想不到的问题。使用volatile则会对禁止语义重排序，当然这也一定程度上降低了代码执行效率</p><p>从实践角度而言，volatile的一个重要作用就是和CAS结合，保证了原子性，详细的可以参见java.util.concurrent.atomic包下的类，比如AtomicInteger。</p><p><strong>7、什么是线程安全</strong></p><p>又是一个理论的问题，各式各样的答案有很多，我给出一个个人认为解释地最好的：<strong>如果你的代码在多线程下执行和在单线程下执行永远都能获得一样的结果，那么你的代码就是线程安全的</strong>。</p><p>这个问题有值得一提的地方，就是线程安全也是有几个级别的：</p><p>（1）不可变</p><p>像String、Integer、Long这些，都是final类型的类，任何一个线程都改变不了它们的值，要改变除非新创建一个，因此这些不可变对象不需要任何同步手段就可以直接在多线程环境下使用</p><p>（2）绝对线程安全</p><p>不管运行时环境如何，调用者都不需要额外的同步措施。要做到这一点通常需要付出许多额外的代价，Java中标注自己是线程安全的类，实际上绝大多数都不是线程安全的，不过绝对线程安全的类，Java中也有，比方说CopyOnWriteArrayList、CopyOnWriteArraySet</p><p>（3）相对线程安全</p><p>相对线程安全也就是我们通常意义上所说的线程安全，像Vector这种，add、remove方法都是原子操作，不会被打断，但也仅限于此，如果有个线程在遍历某个Vector、有个线程同时在add这个Vector，99%的情况下都会出现ConcurrentModificationException，也就是<strong>fail-fast机制</strong>。</p><p>（4）线程非安全</p><p>这个就没什么好说的了，ArrayList、LinkedList、HashMap等都是线程非安全的类</p><p><strong>8、Java中如何获取到线程dump文件</strong></p><p>死循环、死锁、阻塞、页面打开慢等问题，打线程dump是最好的解决问题的途径。所谓线程dump也就是线程堆栈，获取到线程堆栈有两步：</p><p>（1）获取到线程的pid，可以通过使用jps命令，在Linux环境下还可以使用ps -ef | grep java</p><p>（2）打印线程堆栈，可以通过使用jstack pid命令，在Linux环境下还可以使用kill -3 pid</p><p>另外提一点，Thread类提供了一个getStackTrace()方法也可以用于获取线程堆栈。这是一个实例方法，因此此方法是和具体线程实例绑定的，每次获取获取到的是具体某个线程当前运行的堆栈，</p><p><strong>9、一个线程如果出现了运行时异常会怎么样</strong></p><p>如果这个异常没有被捕获的话，这个线程就停止执行了。另外重要的一点是：<strong>如果这个线程持有某个某个对象的监视器，那么这个对象监视器会被立即释放</strong></p><p><strong>10、如何在两个线程之间共享数据</strong></p><p>通过在线程之间共享对象就可以了，然后通过wait/notify/notifyAll、await/signal/signalAll进行唤起和等待，比方说阻塞队列BlockingQueue就是为线程之间共享数据而设计的</p><p><strong>11、sleep方法和wait方法有什么区别</strong> </p><p>这个问题常问，sleep方法和wait方法都可以用来放弃CPU一定的时间，不同点在于如果线程持有某个对象的监视器，sleep方法不会放弃这个对象的监视器，wait方法会放弃这个对象的监视器</p><p><strong>12、生产者消费者模型的作用是什么</strong></p><p>这个问题很理论，但是很重要：</p><p>（1）<strong>通过平衡生产者的生产能力和消费者的消费能力来提升整个系统的运行效率</strong>，这是生产者消费者模型最重要的作用</p><p>（2）解耦，这是生产者消费者模型附带的作用，解耦意味着生产者和消费者之间的联系少，联系越少越可以独自发展而不需要收到相互的制约</p><p><strong>13、ThreadLocal有什么用</strong></p><p>简单说ThreadLocal就是一种以<strong>空间换时间</strong>的做法，在每个Thread里面维护了一个以开地址法实现的ThreadLocal.ThreadLocalMap，把数据进行隔离，数据不共享，自然就没有线程安全方面的问题了</p><p><strong>14、为什么wait()方法和notify()/notifyAll()方法要在同步块中被调用</strong></p><p>这是JDK强制的，wait()方法和notify()/notifyAll()方法在调用前都必须先获得对象的锁</p><p><strong>15、wait()方法和notify()/notifyAll()方法在放弃对象监视器时有什么区别</strong></p><p>wait()方法和notify()/notifyAll()方法在放弃对象监视器的时候的区别在于：<strong>wait()方法立即释放对象监视器，notify()/notifyAll()方法则会等待线程剩余代码执行完毕才会放弃对象监视器</strong>。</p><p><strong>16、为什么要使用线程池</strong></p><p>避免频繁地创建和销毁线程，达到线程对象的重用。另外，使用线程池还可以根据项目灵活地控制并发的数目。</p><p><strong>17、怎么检测一个线程是否持有对象监视器</strong></p><p>我也是在网上看到一道多线程面试题才知道有方法可以判断某个线程是否持有对象监视器：Thread类提供了一个holdsLock(Object obj)方法，当且仅当对象obj的监视器被某条线程持有的时候才会返回true，注意这是一个static方法，这意味着<strong>“某条线程”指的是当前线程</strong>。</p><p><strong>18、synchronized和ReentrantLock的区别</strong></p><p>synchronized是和if、else、for、while一样的关键字，ReentrantLock是类，这是二者的本质区别。既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量，ReentrantLock比synchronized的扩展性体现在几点上：</p><p>（1）ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁</p><p>（2）ReentrantLock可以获取各种锁的信息</p><p>（3）ReentrantLock可以灵活地实现多路通知</p><p>另外，二者的锁机制其实也是不一样的。ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的应该是对象头中mark word，这点我不能确定。</p><p><strong>19、ConcurrentHashMap的并发度是什么</strong></p><p>ConcurrentHashMap的并发度就是segment的大小，默认为16，这意味着最多同时可以有16条线程操作ConcurrentHashMap，这也是ConcurrentHashMap对Hashtable的最大优势，任何情况下，Hashtable能同时有两条线程获取Hashtable中的数据吗？</p><p><strong>20、ReadWriteLock是什么</strong></p><p>首先明确一下，不是说ReentrantLock不好，只是ReentrantLock某些时候有局限。如果使用ReentrantLock，可能本身是为了防止线程A在写数据、线程B在读数据造成的数据不一致，但这样，如果线程C在读数据、线程D也在读数据，读数据是不会改变数据的，没有必要加锁，但是还是加锁了，降低了程序的性能。</p><p>因为这个，才诞生了读写锁ReadWriteLock。ReadWriteLock是一个读写锁接口，ReentrantReadWriteLock是ReadWriteLock接口的一个具体实现，实现了读写的分离，<strong>读锁是共享的，写锁是独占的</strong>，读和读之间不会互斥，读和写、写和读、写和写之间才会互斥，提升了读写的性能。</p><p><strong>21、FutureTask是什么</strong></p><p>这个其实前面有提到过，FutureTask表示一个异步运算的任务。FutureTask里面可以传入一个Callable的具体实现类，可以对这个异步运算的任务的结果进行等待获取、判断是否已经完成、取消任务等操作。当然，由于FutureTask也是Runnable接口的实现类，所以FutureTask也可以放入线程池中。</p><p><strong>22、Linux环境下如何查找哪个线程使用CPU最长</strong></p><p>这是一个比较偏实践的问题，这种问题我觉得挺有意义的。可以这么做：</p><p>（1）获取项目的pid，jps或者ps -ef | grep java，这个前面有讲过</p><p>（2）top -H -p pid，顺序不能改变</p><p>这样就可以打印出当前的项目，每条线程占用CPU时间的百分比。注意这里打出的是LWP，也就是操作系统原生线程的线程号，我笔记本山没有部署Linux环境下的Java工程，因此没有办法截图演示，网友朋友们如果公司是使用Linux环境部署项目的话，可以尝试一下。</p><p>使用”top -H -p pid”+”jps pid”可以很容易地找到某条占用CPU高的线程的线程堆栈，从而定位占用CPU高的原因，一般是因为不当的代码操作导致了死循环。</p><p>最后提一点，”top -H -p pid”打出来的LWP是十进制的，”jps pid”打出来的本地线程号是十六进制的，转换一下，就能定位到占用CPU高的线程的当前线程堆栈了。</p><p><strong>23、Java编程写一个会导致死锁的程序</strong></p><p>第一次看到这个题目，觉得这是一个非常好的问题。很多人都知道死锁是怎么一回事儿：线程A和线程B相互等待对方持有的锁导致程序无限死循环下去。当然也仅限于此了，问一下怎么写一个死锁的程序就不知道了，这种情况说白了就是不懂什么是死锁，懂一个理论就完事儿了，实践中碰到死锁的问题基本上是看不出来的。</p><p>真正理解什么是死锁，这个问题其实不难，几个步骤：</p><p>（1）两个线程里面分别持有两个Object对象：lock1和lock2。这两个lock作为同步代码块的锁；</p><p>（2）线程1的run()方法中同步代码块先获取lock1的对象锁，Thread.sleep(xxx)，时间不需要太多，50毫秒差不多了，然后接着获取lock2的对象锁。这么做主要是为了防止线程1启动一下子就连续获得了lock1和lock2两个对象的对象锁</p><p>（3）线程2的run)(方法中同步代码块先获取lock2的对象锁，接着获取lock1的对象锁，当然这时lock1的对象锁已经被线程1锁持有，线程2肯定是要等待线程1释放lock1的对象锁的</p><p>这样，线程1”睡觉”睡完，线程2已经获取了lock2的对象锁了，线程1此时尝试获取lock2的对象锁，便被阻塞，此时一个死锁就形成了。代码就不写了，占的篇幅有点多，Java多线程7：死锁这篇文章里面有，就是上面步骤的代码实现。</p><p><strong>24、怎么唤醒一个阻塞的线程</strong></p><p>如果线程是因为调用了wait()、sleep()或者join()方法而导致的阻塞，可以中断线程，并且通过抛出InterruptedException来唤醒它；如果线程遇到了IO阻塞，无能为力，因为IO是操作系统实现的，Java代码并没有办法直接接触到操作系统。</p><p><strong>25、不可变对象对多线程有什么帮助</strong></p><p>前面有提到过的一个问题，不可变对象保证了对象的内存可见性，对不可变对象的读取不需要进行额外的同步手段，提升了代码执行效率。</p><p><strong>26、什么是多线程的上下文切换</strong></p><p>多线程的上下文切换是指CPU控制权由一个已经正在运行的线程切换到另外一个就绪并等待获取CPU执行权的线程的过程。</p><p><strong>27、如果你提交任务时，线程池队列已满，这时会发生什么</strong></p><p>这里区分一下：</p><ol><li>如果使用的是无界队列LinkedBlockingQueue，也就是无界队列的话，没关系，继续添加任务到阻塞队列中等待执行，因为LinkedBlockingQueue可以近乎认为是一个无穷大的队列，可以无限存放任务</li><li>如果使用的是有界队列比如ArrayBlockingQueue，任务首先会被添加到ArrayBlockingQueue中，ArrayBlockingQueue满了，会根据maximumPoolSize的值增加线程数量，如果增加了线程数量还是处理不过来，ArrayBlockingQueue继续满，那么则会使用拒绝策略RejectedExecutionHandler处理满了的任务，默认是AbortPolicy</li></ol><p><strong>28、Java中用到的线程调度算法是什么</strong></p><p>抢占式。一个线程用完CPU之后，操作系统会根据线程优先级、线程饥饿情况等数据算出一个总的优先级并分配下一个时间片给某个线程执行。</p><p><strong>29、Thread.sleep(0)的作用是什么</strong></p><p>这个问题和上面那个问题是相关的，我就连在一起了。由于Java采用抢占式的线程调度算法，因此可能会出现某条线程常常获取到CPU控制权的情况，为了让某些优先级比较低的线程也能获取到CPU控制权，可以使用Thread.sleep(0)手动触发一次操作系统分配时间片的操作，这也是平衡CPU控制权的一种操作。</p><p><strong>30、什么是自旋</strong></p><p>很多synchronized里面的代码只是一些很简单的代码，执行时间非常快，此时等待的线程都加锁可能是一种不太值得的操作，因为线程阻塞涉及到用户态和内核态切换的问题。既然synchronized里面的代码执行得非常快，不妨让等待锁的线程不要被阻塞，而是在synchronized的边界做忙循环，这就是自旋。如果做了多次忙循环发现还没有获得锁，再阻塞，这样可能是一种更好的策略。</p><p><strong>31、什么是Java内存模型</strong></p><p>Java内存模型定义了一种多线程访问Java内存的规范。Java内存模型要完整讲不是这里几句话能说清楚的，我简单总结一下Java内存模型的几部分内容：</p><p>（1）Java内存模型将内存分为了<strong>主内存和工作内存</strong>。类的状态，也就是类之间共享的变量，是存储在主内存中的，每次Java线程用到这些主内存中的变量的时候，会读一次主内存中的变量，并让这些内存在自己的工作内存中有一份拷贝，运行自己线程代码的时候，用到这些变量，操作的都是自己工作内存中的那一份。在线程代码执行完毕之后，会将最新的值更新到主内存中去</p><p>（2）定义了几个原子操作，用于操作主内存和工作内存中的变量</p><p>（3）定义了volatile变量的使用规则</p><p>（4）happens-before，即先行发生原则，定义了操作A必然先行发生于操作B的一些规则，比如在同一个线程内控制流前面的代码一定先行发生于控制流后面的代码、一个释放锁unlock的动作一定先行发生于后面对于同一个锁进行锁定lock的动作等等，只要符合这些规则，则不需要额外做同步措施，如果某段代码不符合所有的happens-before规则，则这段代码一定是线程非安全的</p><p><strong>32、什么是CAS</strong></p><p>CAS，全称为Compare and Swap，即比较-替换。假设有三个操作数：<strong>内存值V、旧的预期值A、要修改的值B，当且仅当预期值A和内存值V相同时，才会将内存值修改为B并返回true，否则什么都不做并返回false</strong>。当然CAS一定要volatile变量配合，这样才能保证每次拿到的变量是主内存中最新的那个值，否则旧的预期值A对某条线程来说，永远是一个不会变的值A，只要某次CAS操作失败，永远都不可能成功。</p><p><strong>33、什么是乐观锁和悲观锁</strong></p><p>（1）乐观锁：就像它的名字一样，对于并发间操作产生的线程安全问题持乐观状态，乐观锁认为竞争不总是会发生，因此它不需要持有锁，将<strong>比较-替换</strong>这两个动作作为一个原子操作尝试去修改内存中的变量，如果失败则表示发生冲突，那么就应该有相应的重试逻辑。</p><p>（2）悲观锁：还是像它的名字一样，对于并发间操作产生的线程安全问题持悲观状态，悲观锁认为竞争总是会发生，因此每次对某资源进行操作时，都会持有一个独占的锁，就像synchronized，不管三七二十一，直接上了锁就操作资源了。</p><p><strong>34、什么是AQS</strong></p><p>简单说一下AQS，AQS全称为AbstractQueuedSychronizer，翻译过来应该是抽象队列同步器。</p><p>如果说java.util.concurrent的基础是CAS的话，那么AQS就是整个Java并发包的核心了，ReentrantLock、CountDownLatch、Semaphore等等都用到了它。AQS实际上以双向队列的形式连接所有的Entry，比方说ReentrantLock，所有等待的线程都被放在一个Entry中并连成双向队列，前面一个线程使用ReentrantLock好了，则双向队列实际上的第一个Entry开始运行。</p><p>AQS定义了对双向队列所有的操作，而只开放了tryLock和tryRelease方法给开发者使用，开发者可以根据自己的实现重写tryLock和tryRelease方法，以实现自己的并发功能。</p><p><strong>35、单例模式的线程安全性</strong></p><p>老生常谈的问题了，首先要说的是单例模式的线程安全意味着：<strong>某个类的实例在多线程环境下只会被创建一次出来</strong>。单例模式有很多种的写法，我总结一下：</p><p>（1）饿汉式单例模式的写法：线程安全</p><p>（2）懒汉式单例模式的写法：非线程安全</p><p>（3）双检锁单例模式的写法：线程安全</p><p><strong>36、Semaphore有什么作用</strong></p><p>Semaphore就是一个信号量，它的作用是<strong>限制某段代码块的并发数</strong>。Semaphore有一个构造函数，可以传入一个int型整数n，表示某段代码最多只有n个线程可以访问，如果超出了n，那么请等待，等到某个线程执行完毕这段代码块，下一个线程再进入。由此可以看出如果Semaphore构造函数中传入的int型整数n=1，相当于变成了一个synchronized了。</p><p><strong>37、Hashtable的size()方法中明明只有一条语句”return count”，为什么还要做同步？</strong></p><p>这是我之前的一个困惑，不知道大家有没有想过这个问题。某个方法中如果有多条语句，并且都在操作同一个类变量，那么在多线程环境下不加锁，势必会引发线程安全问题，这很好理解，但是size()方法明明只有一条语句，为什么还要加锁？</p><p>关于这个问题，在慢慢地工作、学习中，有了理解，主要原因有两点：</p><p>（1）<strong>同一时间只能有一条线程执行固定类的同步方法，但是对于类的非同步方法，可以多条线程同时访问</strong>。所以，这样就有问题了，可能线程A在执行Hashtable的put方法添加数据，线程B则可以正常调用size()方法读取Hashtable中当前元素的个数，那读取到的值可能不是最新的，可能线程A添加了完了数据，但是没有对size++，线程B就已经读取size了，那么对于线程B来说读取到的size一定是不准确的。而给size()方法加了同步之后，意味着线程B调用size()方法只有在线程A调用put方法完毕之后才可以调用，这样就保证了线程安全性</p><p>（2）<strong>CPU执行代码，执行的不是Java代码，这点很关键，一定得记住</strong>。Java代码最终是被翻译成机器码执行的，机器码才是真正可以和硬件电路交互的代码。<strong>即使你看到Java代码只有一行，甚至你看到Java代码编译之后生成的字节码也只有一行，也不意味着对于底层来说这句语句的操作只有一个</strong>。一句”return count”假设被翻译成了三句汇编语句执行，一句汇编语句和其机器码做对应，完全可能执行完第一句，线程就切换了。</p><p><strong>38、线程类的构造方法、静态块是被哪个线程调用的</strong></p><p>这是一个非常刁钻和狡猾的问题。请记住：线程类的构造方法、静态块是被new这个线程类所在的线程所调用的，而run方法里面的代码才是被线程自身所调用的。</p><p>如果说上面的说法让你感到困惑，那么我举个例子，假设Thread2中new了Thread1，main函数中new了Thread2，那么：</p><p>（1）Thread2的构造方法、静态块是main线程调用的，Thread2的run()方法是Thread2自己调用的</p><p>（2）Thread1的构造方法、静态块是Thread2调用的，Thread1的run()方法是Thread1自己调用的</p><p><strong>39、同步方法和同步块，哪个是更好的选择</strong></p><p>同步块，这意味着同步块之外的代码是异步执行的，这比同步整个方法更提升代码的效率。请知道一条原则：<strong>同步的范围越小越好</strong>。</p><p>借着这一条，我额外提一点，虽说同步的范围越少越好，但是在Java虚拟机中还是存在着一种叫做<strong>锁粗化</strong>的优化方法，这种方法就是把同步范围变大。这是有用的，比方说StringBuffer，它是一个线程安全的类，自然最常用的append()方法是一个同步方法，我们写代码的时候会反复append字符串，这意味着要进行反复的加锁-&gt;解锁，这对性能不利，因为这意味着Java虚拟机在这条线程上要反复地在内核态和用户态之间进行切换，因此Java虚拟机会将多次append方法调用的代码进行一个锁粗化的操作，将多次的append的操作扩展到append方法的头尾，变成一个大的同步块，这样就减少了加锁–&gt;解锁的次数，有效地提升了代码执行的效率。</p><p><strong>40、高并发、任务执行时间短的业务怎样使用线程池？并发不高、任务执行时间长的业务怎样使用线程池？并发高、业务执行时间长的业务怎样使用线程池？</strong></p><p>这是我在并发编程网上看到的一个问题，把这个问题放在最后一个，希望每个人都能看到并且思考一下，因为这个问题非常好、非常实际、非常专业。关于这个问题，个人看法是：</p><p>（1）高并发、任务执行时间短的业务，线程池线程数可以设置为CPU核数+1，减少线程上下文的切换</p><p>（2）并发不高、任务执行时间长的业务要区分开看：</p><p>　　a）假如是业务时间长集中在IO操作上，也就是IO密集型的任务，因为IO操作并不占用CPU，所以不要让所有的CPU闲下来，可以加大线程池中的线程数目，让CPU处理更多的业务</p><p>　　b）假如是业务时间长集中在计算操作上，也就是计算密集型任务，这个就没办法了，和（1）一样吧，线程池中的线程数设置得少一些，减少线程上下文的切换</p><p>（3）并发高、业务执行时间长，解决这种类型任务的关键不在于线程池而在于整体架构的设计，看看这些业务里面某些数据是否能做缓存是第一步，增加服务器是第二步，至于线程池的设置，设置参考其他有关线程池的文章。最后，业务执行时间长的问题，也可能需要分析一下，看看能不能使用中间件对任务进行拆分和解耦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;1、多线程有什么用？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个可能在很多人看来很扯淡的一个问题：我会用多线程就好了，还管它有什么用？在我看来，这个回答更扯淡。所谓”知其然知其所以然”，”会用”只是”知其然”，”为什么用”才是”知其所以然”，只有达到”知其然知其所
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>linux下vi/vim常用命令大全</title>
    <link href="http://yoursite.com/2018/06/06/linux%E4%B8%8Bvivim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>http://yoursite.com/2018/06/06/linux下vivim常用命令大全/</id>
    <published>2018-06-06T01:15:44.226Z</published>
    <updated>2018-06-06T01:19:01.669Z</updated>
    
    <content type="html"><![CDATA[<h4 id="vi-vim-基本使用方法"><a href="#vi-vim-基本使用方法" class="headerlink" title="vi/vim 基本使用方法"></a>vi/vim 基本使用方法</h4><p>vi编辑器是所有Unix及Linux系统下标准的编辑器，它的强大不逊色于任何最新的文本编辑器，这里只是简单地介绍一下它的用法和一小部分指令。由于对Unix及Linux系统的任何版本，vi编辑器是完全相同的，因此您可以在其他任何介绍vi的地方进一步了解它。Vi也是Linux中最基本的文本编辑器，学会它后，您将在Linux的世界里畅行无阻。</p><h4 id="vi的基本概念"><a href="#vi的基本概念" class="headerlink" title="vi的基本概念"></a>vi的基本概念</h4><p>基本上vi可以分为三种状态，分别是命令模式（command mode）、插入模式（Insert mode）和底行模式（last line mode），各模式的功能区分如下：</p><p>1) <strong>命令行模式</strong>command mode）</p><p>控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode。</p><p>2) <strong>插入模式</strong>（Insert mode）</p><p>只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令行模式。</p><p>3) <strong>底行模式</strong>（last line mode）</p><p>将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号……等。</p><p>不过一般我们在使用时把vi简化成两个模式，就是将底行模式（last line mode）也算入命令行模式command mode）。</p><h4 id="vi的基本操作"><a href="#vi的基本操作" class="headerlink" title="vi的基本操作"></a>vi的基本操作</h4><p>a) 进入vi</p><p>在系统提示符号输入vi及文件名称后，就进入vi全屏幕编辑画面：</p><p><strong>$ vi myfile</strong></p><p>不过有一点要特别注意，就是您进入vi之后，是处于「命令行模式（command mode）」，您要切换到「插入模式（Insert mode）」才能够输入文字。初次使用vi的人都会想先用上下左右键移动光标，结果电脑一直哔哔叫，把自己气个半死，所以进入vi后，先不要乱动，转换到「插入模式（Insert mode）」再说吧！</p><p>b) 切换至插入模式（Insert mode）编辑文件</p><p>在「命令行模式（command mode）」下<strong>按一下字母「i」</strong>就可以进入「插入模式（Insert mode）」，这时候你就可以开始输入文字了。</p><p>c) Insert 的切换</p><p>您目前处于「插入模式（Insert mode）」，您就只能一直输入文字，如果您发现输错了字！想用光标键往回移动，将该字删除，就要<strong>先按一下「ESC」键</strong>转到「命令行模式（command mode）」再删除文字。</p><p>d) 退出vi及保存文件</p><p>在「命令行模式（command mode）」下<strong>，按一下「：」冒号</strong>键进入「Last line mode」，例如：</p><p>: <strong>w filename</strong> （输入 「w filename」将文章以指定的文件名filename保存）</p><p>: <strong>wq</strong> (输入「wq」，存盘并退出vi)</p><p>: <strong>q!</strong> (输入q!， 不存盘强制退出vi)</p><h4 id="命令行模式（command-mode）功能键"><a href="#命令行模式（command-mode）功能键" class="headerlink" title="命令行模式（command mode）功能键"></a>命令行模式（command mode）功能键</h4><p>1）. 插入模式</p><p>按「i」切换进入插入模式「insert mode」，按“i”进入插入模式后是从光标当前位置开始输入文件；</p><p>按「a」进入插入模式后，是从目前光标所在位置的下一个位置开始输入文字；</p><p>按「o」进入插入模式后，是插入新的一行，从行首开始输入文字。</p><p>2）. 从插入模式切换为命令行模式</p><p>按「ESC」键。</p><p>3）. 移动光标</p><p>vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。</p><p>按「ctrl」+「b」：屏幕往“后”移动一页。</p><p>按「ctrl」+「f」：屏幕往“前”移动一页。</p><p>按「ctrl」+「u」：屏幕往“后”移动半页。</p><p>按「ctrl」+「d」：屏幕往“前”移动半页。</p><p>按数字「0」：移到文章的开头。</p><p>按「G」：移动到文章的最后。</p><p>按「$」：移动到光标所在行的“行尾”。</p><p>按「^」：移动到光标所在行的“行首”</p><p>按「w」：光标跳到下个字的开头</p><p>按「e」：光标跳到下个字的字尾</p><p>按「b」：光标回到上个字的开头</p><p>按「#l」：光标移到该行的第#个位置，如：5l,56l。</p><p>4）. 删除文字</p><p>「x」：每按一次，删除光标所在位置的“后面”一个字符。</p><p>「#x」：例如，「6x」表示删除光标所在位置的“后面”6个字符。</p><p>「X」：大写的X，每按一次，删除光标所在位置的“前面”一个字符。</p><p>「#X」：例如，「20X」表示删除光标所在位置的“前面”20个字符。</p><p>「dd」：删除光标所在行。</p><p>「#dd」：从光标所在行开始删除#行</p><p>5）. 复制</p><p>「yw」：将光标所在之处到字尾的字符复制到缓冲区中。</p><p>「#yw」：复制#个字到缓冲区</p><p>「yy」：复制光标所在行到缓冲区。</p><p>「#yy」：例如，「6yy」表示拷贝从光标所在的该行“往下数”6行文字。</p><p>「p」：将缓冲区内的字符贴到光标所在位置。注意：所有与“y”有关的复制命令都必须与“p”配合才能完成复制与粘贴功能。</p><p>6）. 替换</p><p>「r」：替换光标所在处的字符。</p><p>「R」：替换光标所到之处的字符，直到按下「ESC」键为止。</p><p>7）. 恢复/撤消/还原上一次操作</p><p>「u」：如果误执行一个命令，可以马上按下「u」，撤消上一个操作。按多次“u”可以执行多次撤消。</p><p>8）. 更改</p><p>「cw」：更改光标所在处的字到字尾处</p><p>「c#w」：例如，「c3w」表示更改3个字</p><p>9）. 跳至指定的行</p><p>「ctrl」+「g」列出光标所在行的行号。</p><p>「#G」：例如，「15G」，表示移动光标至文章的第15行行首。</p><h4 id="Last-line-mode下命令简介"><a href="#Last-line-mode下命令简介" class="headerlink" title="Last line mode下命令简介"></a>Last line mode下命令简介</h4><p>在使用「last line mode」之前，请记住先按「ESC」键确定您已经处于「command mode」下后，再按「：」冒号即可进入「last line mode」。</p><p>A) 列出行号</p><p>「set nu」：输入「set nu」后，会在文件中的每一行前面列出行号。</p><p>B) 跳到文件中的某一行</p><p>「#」：「#」号表示一个数字，在冒号后输入一个数字，再按回车键就会跳到该行了，如输入数字15，再回车，就会跳到文章的第15行。</p><p>C) 查找字符</p><p>「/关键字」：先按「/」键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按「n」会往后寻找到您要的关键字为止。</p><p>「?关键字」：先按「?」键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按「n」会往前寻找到您要的关键字为止。</p><p>D) 保存文件</p><p>「w」：在冒号输入字母「w」就可以将文件保存起来。</p><p>E) 离开vi</p><p>「q」：按「q」就是退出，如果无法离开vi，可以在「q」后跟一个「!」强制离开vi。</p><p>「qw」：一般建议离开时，搭配「w」一起使用，这样在退出的时候还可以保存文件。</p><h4 id="vi命令列表"><a href="#vi命令列表" class="headerlink" title="vi命令列表"></a>vi命令列表</h4><p>1、下表列出命令模式下的一些键的功能：</p><p>h<br>左移光标一个字符</p><p>l<br>右移光标一个字符</p><p>k<br>光标上移一行</p><p>j<br>光标下移一行</p><p>^<br>光标移动至行首</p><p>0<br>数字“0”，光标移至文章的开头</p><p>G<br>光标移至文章的最后</p><p>$<br>光标移动至行尾</p><p>Ctrl+f<br>向前翻屏</p><p>Ctrl+b<br>向后翻屏</p><p>Ctrl+d<br>向前翻半屏</p><p>Ctrl+u<br>向后翻半屏</p><p>i<br>在光标位置前插入字符</p><p>a<br>在光标所在位置的后一个字符开始增加</p><p>o<br>插入新的一行，从行首开始输入</p><p>ESC<br>从输入状态退至命令状态</p><p>x<br>删除光标后面的字符</p><p>#x<br>删除光标后的＃个字符</p><p>X<br>(大写X)，删除光标前面的字符</p><p>#X<br>删除光标前面的#个字符</p><p>dd<br>删除光标所在的行</p><p>#dd<br>删除从光标所在行数的#行</p><p>yw<br>复制光标所在位置的一个字</p><p>#yw<br>复制光标所在位置的#个字</p><p>yy<br>复制光标所在位置的一行</p><p>#yy<br>复制从光标所在行数的#行</p><p>p<br>粘贴</p><p>u<br>取消操作</p><p>cw<br>更改光标所在位置的一个字</p><p>#cw<br>更改光标所在位置的#个字</p><p>下表列出行命令模式下的一些指令<br>w filename<br>储存正在编辑的文件为filename</p><p>wq filename<br>储存正在编辑的文件为filename，并退出vi</p><p>q!<br>放弃所有修改，退出vi</p><p>set nu<br>显示行号</p><p>/或?<br>查找，在/后输入要查找的内容</p><p>n<br>与/或?一起使用，如果查找的内容不是想要找的关键字，按n或向后（与/联用）或向前（与?联用）继续查找，直到找到为止。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;vi-vim-基本使用方法&quot;&gt;&lt;a href=&quot;#vi-vim-基本使用方法&quot; class=&quot;headerlink&quot; title=&quot;vi/vim 基本使用方法&quot;&gt;&lt;/a&gt;vi/vim 基本使用方法&lt;/h4&gt;&lt;p&gt;vi编辑器是所有Unix及Linux系统下标准的编辑
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HashMap HashTable HashSet三者区别</title>
    <link href="http://yoursite.com/2018/06/05/HashMap%20HashTable%20HashSet%E4%B8%89%E8%80%85%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2018/06/05/HashMap HashTable HashSet三者区别/</id>
    <published>2018-06-05T11:46:20.639Z</published>
    <updated>2018-06-05T11:49:19.449Z</updated>
    
    <content type="html"><![CDATA[<p> HashMap、HashSet、HashTable之间的区别是Java程序员的一个常见面试题目，在此仅以此博客记录，并深入源代码进行分析：</p><p>在分析之前，先将其区别列于下面：</p><ol><li>1、HashSet底层采用的是HashMap进行实现的，但是没有key-value，只有HashMap的key set的视图，HashSet不容许重复的对象</li><li>Hashtable是基于Dictionary类的，而HashMap是基于Map接口的一个实现</li><li>Hashtable里默认的方法是同步的，而HashMap则是非同步的，因此Hashtable是多线程安全的</li><li>HashMap可以将空值作为一个表的条目的key或者value,HashMap中由于键不能重复，因此只有一条记录的Key可以是空值，而value可以有多个为空，但HashTable不允许null值(键与值均不行)</li><li>内存初始大小不同，HashTable初始大小是11，而HashMap初始大小是16</li><li>内存扩容时采取的方式也不同，Hashtable采用的是2<em>old+1,而HashMap是2</em>old。</li><li>哈希值的计算方法不同，Hashtable直接使用的是对象的hashCode,而HashMap则是在对象的hashCode的基础上还进行了一些变化</li></ol><p>源代码分析：</p><p><strong>对于区别1，看下面的源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//HashSet类的部份源代码  </span><br><span class="line">public class HashSet&lt;E&gt;  </span><br><span class="line">    extends AbstractSet&lt;E&gt;  </span><br><span class="line">    implements Set&lt;E&gt;, Cloneable, java.io.Serializable  </span><br><span class="line">&#123;   //用于类的序列化，可以不用管它  </span><br><span class="line">    static final long serialVersionUID = -5024744406713321676L;  </span><br><span class="line">    //从这里可以看出HashSet类里面真的是采用HashMap来实现的  </span><br><span class="line">    private transient HashMap&lt;E,Object&gt; map;  </span><br><span class="line">  </span><br><span class="line">    // Dummy value to associate with an Object in the backing Map  </span><br><span class="line">    //这里是生成一个对象，生成这个对象的作用是将每一个键的值均关联于此对象，以满足HashMap的键值对  </span><br><span class="line">    private static final Object PRESENT = new Object();  </span><br><span class="line">  </span><br><span class="line">    /** </span><br><span class="line">     * Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has </span><br><span class="line">     * default initial capacity (16) and load factor (0.75). </span><br><span class="line">     */  </span><br><span class="line">    //这里是一个构造函数，开构生成一个HashMap对象，用来存放数据  </span><br><span class="line">    public HashSet() &#123;  </span><br><span class="line">    map = new HashMap&lt;E,Object&gt;();  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>从上面的代码中得出的结论是HashSet的确是采用HashMap来实现的，而且每一个键都关键同一个Object类的对象，因此键所关联的值没有意义，真正有意义的是键。而HashMap里的键是不允许重复的，因此1也就很容易明白了。 </p><p><strong>对于区别2，继续看源代码如下</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//从这里可以看得出Hashtable是继承于Dictionary,实现了Map接口  </span><br><span class="line">public class Hashtable&lt;K,V&gt;  </span><br><span class="line">    extends Dictionary&lt;K,V&gt;  </span><br><span class="line">    implements Map&lt;K,V&gt;, Cloneable, java.io.Serializable &#123;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//这里可以看出的是HashMap是继承于AbstractMap类，实现了Map接口  </span><br><span class="line">//因此与Hashtable继承的父类不同  </span><br><span class="line">public class HashMap&lt;K,V&gt;  </span><br><span class="line">    extends AbstractMap&lt;K,V&gt;  </span><br><span class="line">    implements Map&lt;K,V&gt;, Cloneable, Serializable</span><br></pre></td></tr></table></figure><p><strong>区别3，找一个具有针对性的方法看看，这个方法就是put</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//Hashtable里的向集体增加键值对的方法，从这里可以明显看到的是  </span><br><span class="line">//采用了synchronized关键字，这个关键字的作用就是用于线程的同步操作  </span><br><span class="line">//因此下面这个方法对于多线程来说是安全的，但这会影响效率     </span><br><span class="line">public synchronized V put(K key, V value) &#123;  </span><br><span class="line">    // Make sure the value is not null  </span><br><span class="line">    //如果值为空的，则会抛出异常  </span><br><span class="line">    if (value == null) &#123;  </span><br><span class="line">        throw new NullPointerException();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    // Makes sure the key is not already in the hashtable.  </span><br><span class="line">    Entry tab[] = table;  </span><br><span class="line">    //获得键值的hashCode,从这里也可以看得出key!=null,否则的话会抛出异常的呦  </span><br><span class="line">    int hash = key.hashCode();  </span><br><span class="line">    //获取键据所在的哈希表的位置  </span><br><span class="line">    int index = (hash &amp; 0x7FFFFFFF) % tab.length;  </span><br><span class="line">    //从下面这个循环中可以看出的是，内部实现采用了链表，即桶状结构  </span><br><span class="line">    for (Entry&lt;K,V&gt; e = tab[index] ; e != null ; e = e.next) &#123;  </span><br><span class="line">        //如果向Hashtable中增加同一个元素时，则会重新更新元素的值   </span><br><span class="line">        if ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;  </span><br><span class="line">                V old = e.value;  </span><br><span class="line">                e.value = value;  </span><br><span class="line">                return old;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    //后面的暂时不用管它，大概的意思就是内存的个数少于某个阀值时，进行重新分配内存  </span><br><span class="line">    modCount++;  </span><br><span class="line">    if (count &gt;= threshold) &#123;  </span><br><span class="line">        // Rehash the table if the threshold is exceeded  </span><br><span class="line">        rehash();  </span><br><span class="line">  </span><br><span class="line">            tab = table;  </span><br><span class="line">            index = (hash &amp; 0x7FFFFFFF) % tab.length;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//HashMap中的实现则相对来说要简单的很多了，如下代码  </span><br><span class="line">//这里的代码中没有synchronize关键字，即可以看出，这个关键函数不是线程安全的  </span><br><span class="line">    public V put(K key, V value) &#123;  </span><br><span class="line">    //对于键是空时，将向Map中放值一个null-value构成的键值对  </span><br><span class="line">    //对值却没有进行判空处理，意味着可以有多个具有键，键所对应的值却为空的元素。  </span><br><span class="line">        if (key == null)  </span><br><span class="line">            return putForNullKey(value);  </span><br><span class="line">    //算出键所在的哈希表的位置  </span><br><span class="line">        int hash = hash(key.hashCode());  </span><br><span class="line">        int i = indexFor(hash, table.length);  </span><br><span class="line">    //同样从这里可以看得出来的是采用的是链表结构，采用的是桶状  </span><br><span class="line">        for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123;  </span><br><span class="line">            Object k;  </span><br><span class="line">            //对于向集体中增加具有相同键的情况时，这里可以看出，并不增加进去，而是进行更新操作  </span><br><span class="line">            if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;  </span><br><span class="line">                V oldValue = e.value;  </span><br><span class="line">                e.value = value;  </span><br><span class="line">                e.recordAccess(this);  </span><br><span class="line">                return oldValue;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        //开始增加元素  </span><br><span class="line">        modCount++;  </span><br><span class="line">        addEntry(hash, key, value, i);  </span><br><span class="line">        return null;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>区别4在上面的代码中，已经分析了，可以再细看一下</strong></p><p><strong>区别5内存初化大小不同，看看两者的源代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public Hashtable() &#123;  </span><br><span class="line">   //从这里可以看出，默认的初始化大小11，这里的11并不是11个字节，而是11个Entry,这个Entry是  </span><br><span class="line">   //实现链表的关键结构  </span><br><span class="line">   //这里的0.75代表的是装载因子  </span><br><span class="line">this(11, 0.75f);  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//这里均是一些定义  </span><br><span class="line"> public HashMap() &#123;  </span><br><span class="line"> //这个默认的装载因子也是0.75  </span><br><span class="line">     this.loadFactor = DEFAULT_LOAD_FACTOR;  </span><br><span class="line"> //默认的痤为0.75*16  </span><br><span class="line">     threshold = (int)(DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);  </span><br><span class="line"> //这里开始是默认的初始化大小，这里大小是16  </span><br><span class="line">     table = new Entry[DEFAULT_INITIAL_CAPACITY];  </span><br><span class="line">     init();  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>从上面的代码中，可以看出的是两者的默认大小是不同的，一个是11，一个是16</p><p><strong>区别6内存的扩容方式，</strong>看一看源代码也是很清楚的，其实区别是不大的，一个是2<em>oldCapacity+1, 一个是2</em>oldCapacity,你说大吗:）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//Hashtable中调整内存的函数，这个函数没有synchronize关键字，但是protected呦  </span><br><span class="line">protected void rehash() &#123;  </span><br><span class="line">    //获取原来的表大小  </span><br><span class="line">    int oldCapacity = table.length;  </span><br><span class="line">    Entry[] oldMap = table;  </span><br><span class="line">  //设置新的大小为2*oldCapacity+1  </span><br><span class="line">    int newCapacity = oldCapacity * 2 + 1;  </span><br><span class="line">    //开设空间  </span><br><span class="line">    Entry[] newMap = new Entry[newCapacity];  </span><br><span class="line">  //以下就不用管了。。。  </span><br><span class="line">    modCount++;  </span><br><span class="line">    threshold = (int)(newCapacity * loadFactor);  </span><br><span class="line">    table = newMap;  </span><br><span class="line">  </span><br><span class="line">    for (int i = oldCapacity ; i-- &gt; 0 ;) &#123;  </span><br><span class="line">        for (Entry&lt;K,V&gt; old = oldMap[i] ; old != null ; ) &#123;  </span><br><span class="line">        Entry&lt;K,V&gt; e = old;  </span><br><span class="line">        old = old.next;  </span><br><span class="line">  </span><br><span class="line">        int index = (e.hash &amp; 0x7FFFFFFF) % newCapacity;  </span><br><span class="line">        e.next = newMap[index];  </span><br><span class="line">        newMap[index] = e;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//HashMap中要简单的多了，看看就知道了  </span><br><span class="line">void addEntry(int hash, K key, V value, int bucketIndex) &#123;  </span><br><span class="line">Entry&lt;K,V&gt; e = table[bucketIndex];  </span><br><span class="line">       table[bucketIndex] = new Entry&lt;K,V&gt;(hash, key, value, e);  </span><br><span class="line">       //如果超过了阀值  </span><br><span class="line">       if (size++ &gt;= threshold)  </span><br><span class="line">       //就将大小设置为原来的2倍  </span><br><span class="line">           resize(2 * table.length);  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>对于区别7的哈希值计算方法的不同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//Hashtable中可以看出的是直接采用关键字的hashcode作为哈希值  </span><br><span class="line">int hash = key.hashCode();  </span><br><span class="line">//然后进行模运算，求出所在哗然表的位置   </span><br><span class="line">int index = (hash &amp; 0x7FFFFFFF) % tab.length;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//HashMap中的实现  </span><br><span class="line">//这两行代码的意思是先计算hashcode,然后再求其在哈希表的相应位置        </span><br><span class="line">int hash = hash(key.hashCode());  </span><br><span class="line">int i = indexFor(hash, table.length);</span><br></pre></td></tr></table></figure><p>上面的HashMap中可以看出关键在两个函数hash与indexFor</p><p>源码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static int hash(int h) &#123;  </span><br><span class="line">    // This function ensures that hashCodes that differ only by  </span><br><span class="line">    // constant multiples at each bit position have a bounded  </span><br><span class="line">    // number of collisions (approximately 8 at default load factor).  </span><br><span class="line">    //这个我就不多说了，&gt;&gt;&gt;这个是无符号右移运算符，可以理解为无符号整型  </span><br><span class="line">    h ^= (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);  </span><br><span class="line">    return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//求位于哈希表中的位置  </span><br><span class="line"> static int indexFor(int h, int length) &#123;  </span><br><span class="line">     return h &amp; (length-1);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; HashMap、HashSet、HashTable之间的区别是Java程序员的一个常见面试题目，在此仅以此博客记录，并深入源代码进行分析：&lt;/p&gt;
&lt;p&gt;在分析之前，先将其区别列于下面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1、HashSet底层采用的是HashMap进行实现的，但
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HashSet学习笔记</title>
    <link href="http://yoursite.com/2018/06/05/HashSet%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/06/05/HashSet学习笔记/</id>
    <published>2018-06-05T11:45:43.802Z</published>
    <updated>2018-06-05T11:43:32.104Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇详细总结了HashMap的实现过程，对于HashSet而言，它是基于HashMap来实现的，底层采用HashMap来保存元素。所以如果对HashMap比较熟悉，那么HashSet的原理应该很好理解!</p><p> 一.HsahSet概述</p><p>HashSet实现Set接口，由哈希表（实际上是一个HashMap实例）支持。它不保证set 的迭代顺序；特别是它不保证该顺序恒久不变。此类允许使用null元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class HashSet&lt;E&gt;  </span><br><span class="line">    extends AbstractSet&lt;E&gt;  </span><br><span class="line">    implements Set&lt;E&gt;, Cloneable, java.io.Serializable  123</span><br></pre></td></tr></table></figure><p>HashSet继承AbstractSet类，实现Set、Cloneable、Serializable接口。其中AbstractSet提供 Set 接口的骨干实现，从而最大限度地减少了实现此接口所需的工作。Set接口是一种不包括重复元素的Collection，它维持它自己的内部排序，所以随机访问没有任何意义。<br><strong>基本属性：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 底层使用HashMap来保存HashSet中所有元素。</span><br><span class="line">    private transient HashMap&lt;E, Object&gt; map;</span><br><span class="line"></span><br><span class="line">    // 定义一个虚拟的Object对象作为HashMap的value，将此对象定义为static final。</span><br><span class="line">    private static final Object PRESENT = new Object();12345</span><br></pre></td></tr></table></figure><p><strong>构造函数：</strong><br>从构造函数中可以看出HashSet所有的构造都是构造出一个新的HashMap，其中最后一个构造函数，为包访问权限是不对外公开，仅仅只在使用LinkedHashSet时才会发生作用。</p><h2 id="二-HsahSet实现"><a href="#二-HsahSet实现" class="headerlink" title="二.HsahSet实现"></a>二.HsahSet实现</h2><p>因为HashSet是基于HashMap，所以对于HashSet，其方法的实现过程是非常简单的。<br>\1. iterator()<br>iterator()方法 返回对此set中元素进行迭代的迭代器。返回元素的顺序并不是特定的。底层实际调用底层HashMap的keySet来返回所有的key。 可见HashSet中的元素，只是存放在了底层HashMap的key上， value使用一个static final的Object对象标识。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Iterator&lt;E&gt; iterator() &#123;</span><br><span class="line">        return map.keySet().iterator();</span><br><span class="line">    &#125;123</span><br></pre></td></tr></table></figure><p>2.size()<br>返回此set中的元素的数量（set的容量）。底层实际调用HashMap的size()方法返回Entry的数量，就得到该Set中元素的个数,即HashMap容器的大小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public int size() &#123;</span><br><span class="line">        return map.size();</span><br><span class="line">    &#125;123</span><br></pre></td></tr></table></figure><p>3.isEmpty()<br>isEmpty()判断HashSet()集合是否为空，如果此set不包含任何元素，则返回true。 底层实际调用HashMap的isEmpty()判断该HashSet是否为空。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean isEmpty() &#123;</span><br><span class="line">        return map.isEmpty();</span><br><span class="line">    &#125;123</span><br></pre></td></tr></table></figure><p>4.contains(Object o)<br>contains()，判断某个元素是否存在于HashSet()中，存在返回true，否则返回false。更加确切的讲应该是要满足这种关系才能返回true：(o==null ? e==null : o.equals(e))。底层调用containsKey判断HashMap的key值是否为空。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean contains(Object o) &#123;</span><br><span class="line">        return map.containsKey(o);</span><br><span class="line">    &#125;123</span><br></pre></td></tr></table></figure><p>5.add()<br>add()如果此 set 中尚未包含指定元素，则添加指定元素。如果此Set没有包含满足(e==null ? e2==null : e.equals(e2)) 的e2时，则将e2添加到Set中，否则不添加且返回false。由于底层使用HashMap的put方法将key = e，value=PRESENT构建成key-value键值对，当此e存在于HashMap的key中，则value将会覆盖原有value，但是key保持不变，所以如果将一个已经存在的e元素添加中HashSet中，新添加的元素是不会保存到HashMap中，所以这就满足了HashSet中元素不会重复的特性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span><br><span class="line">        return map.put(e, PRESENT) == null;</span><br><span class="line">    &#125;123</span><br></pre></td></tr></table></figure><p>6.remove()<br>remove()如果指定元素存在于此 set 中，则将其移除。底层使用HashMap的remove方法删除指定的Entry。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean remove(Object o) &#123;</span><br><span class="line">        return map.remove(o) == PRESENT;</span><br><span class="line">    &#125;123</span><br></pre></td></tr></table></figure><p>7.clear()<br>clear()从此 set 中移除所有元素。底层调用HashMap的clear方法清除所有的Entry。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void clear() &#123;</span><br><span class="line">        map.clear();</span><br><span class="line">    &#125;123</span><br></pre></td></tr></table></figure><p>8.clone()<br>底层实际调用HashMap的clone()方法，获取HashMap的浅表副本,并没有复制这些元素本身。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public Object clone() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            HashSet&lt;E&gt; newSet = (HashSet&lt;E&gt;) super.clone();</span><br><span class="line">            newSet.map = (HashMap&lt;E, Object&gt;) map.clone();</span><br><span class="line">            return newSet;</span><br><span class="line">        &#125; catch (CloneNotSupportedException e) &#123;</span><br><span class="line">            throw new InternalError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇详细总结了HashMap的实现过程，对于HashSet而言，它是基于HashMap来实现的，底层采用HashMap来保存元素。所以如果对HashMap比较熟悉，那么HashSet的原理应该很好理解!&lt;/p&gt;
&lt;p&gt; 一.HsahSet概述&lt;/p&gt;
&lt;p&gt;HashSet
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HashTable学习笔记</title>
    <link href="http://yoursite.com/2018/06/05/HashTable%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/06/05/HashTable学习笔记/</id>
    <published>2018-06-05T11:44:58.795Z</published>
    <updated>2018-06-05T11:42:12.029Z</updated>
    
    <content type="html"><![CDATA[<p> 有两个类都提供了一个多种用途的hashTable机制，他们都可以将可以key和value结合起来构成键值对通过put(key,value)方法保存起来，然后通过get(key)方法获取相对应的value值。一个是前面提到的HashMap，还有一个就是马上要讲解的HashTable。对于HashTable而言，它在很大程度上和HashMap的实现差不多，如果我们对HashMap比较了解的话，对HashTable的认知会提高很大的帮助。他们两者之间只存在几点的不同，这个后面会阐述。 </p><h3 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h3><p>HashTable在Java中的定义如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class Hashtable&lt;K,V&gt;  </span><br><span class="line">    extends Dictionary&lt;K,V&gt;  </span><br><span class="line">    implements Map&lt;K,V&gt;, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><p>从中可以看出HashTable继承Dictionary类，实现Map接口。其中Dictionary类是任何可将键映射到相应值的类（如 <code>Hashtable</code>）的抽象父类。每个键和每个值都是一个对象。在任何一个 <code>Dictionary</code> 对象中，每个键至多与一个值相关联。Map是”key-value键值对”接口。</p><p>​        HashTable采用”拉链法”实现哈希表，它定义了几个重要的参数：table、count、threshold、loadFactor、modCount。</p><p>​        table：为一个Entry[]数组类型，Entry代表了“拉链”的节点，每一个Entry代表了一个键值对，哈希表的”key-value键值对”都是存储在Entry数组中的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">count：HashTable的大小，注意这个大小并不是HashTable的容器大小，而是他所包含Entry键值对的数量。</span><br><span class="line">threshold：Hashtable的阈值，用于判断是否需要调整Hashtable的容量。threshold的值=&quot;容量*加载因子&quot;。</span><br><span class="line">loadFactor：加载因子。</span><br><span class="line">modCount：用来实现“fail-fast”机制的（也就是快速失败）。所谓快速失败就是在并发集合中，其进行迭代操作时，若有其他线程对其进行结构性的修改，这时迭代器会立马感知到，并且立即抛出ConcurrentModificationException异常，而不是等到迭代完成之后才告诉你（你已经出错了）。</span><br></pre></td></tr></table></figure><h3 id="二、构造方法"><a href="#二、构造方法" class="headerlink" title="二、构造方法"></a>二、构造方法</h3><p>​        在HashTabel中存在5个构造函数。通过这5个构造函数我们构建出一个我想要的HashTable。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Hashtable() &#123;  </span><br><span class="line">        this(11, 0.75f);  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>  默认构造函数，容量为11，加载因子为0.75。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Hashtable(int initialCapacity) &#123;  </span><br><span class="line">        this(initialCapacity, 0.75f);  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>   用指定初始容量和默认的加载因子 (0.75) 构造一个新的空哈希表。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public Hashtable(int initialCapacity, float loadFactor) &#123;  </span><br><span class="line">        //验证初始容量  </span><br><span class="line">        if (initialCapacity &lt; 0)  </span><br><span class="line">            throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+  </span><br><span class="line">                                               initialCapacity);  </span><br><span class="line">        //验证加载因子  </span><br><span class="line">        if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))  </span><br><span class="line">            throw new IllegalArgumentException(&quot;Illegal Load: &quot;+loadFactor);  </span><br><span class="line">  </span><br><span class="line">        if (initialCapacity==0)  </span><br><span class="line">            initialCapacity = 1;  </span><br><span class="line">          </span><br><span class="line">        this.loadFactor = loadFactor;  </span><br><span class="line">          </span><br><span class="line">        //初始化table，获得大小为initialCapacity的table数组  </span><br><span class="line">        table = new Entry[initialCapacity];  </span><br><span class="line">        //计算阀值  </span><br><span class="line">        threshold = (int)Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + 1);  </span><br><span class="line">        //初始化HashSeed值  </span><br><span class="line">        initHashSeedAsNeeded(initialCapacity);  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 用指定初始容量和指定加载因子构造一个新的空哈希表。其中initHashSeedAsNeeded方法用于初始化hashSeed参数，其中hashSeed用于计算key的hash值，它与key的hashCode进行按位异或运算。这个hashSeed是一个与实例相关的随机值，主要用于解决hash冲突。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private int hash(Object k) &#123;  </span><br><span class="line">        return hashSeed ^ k.hashCode();  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>构造一个与给定的 Map 具有相同映射关系的新哈希表。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public Hashtable(Map&lt;? extends K, ? extends V&gt; t) &#123;  </span><br><span class="line">        //设置table容器大小，其值==t.size * 2 + 1  </span><br><span class="line">        this(Math.max(2*t.size(), 11), 0.75f);  </span><br><span class="line">        putAll(t);  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="三、主要方法"><a href="#三、主要方法" class="headerlink" title="三、主要方法"></a>三、主要方法</h3><p>​        HashTable的API对外提供了许多方法，这些方法能够很好帮助我们操作HashTable，但是这里我只介绍两个最根本的方法：put、get。</p><p>​        首先我们先看put方法：将指定 <code>key</code> 映射到此哈希表中的指定 <code>value</code>。注意这里键key和值value都不可为空。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public synchronized V put(K key, V value) &#123;  </span><br><span class="line">        // 确保value不为null  </span><br><span class="line">        if (value == null) &#123;  </span><br><span class="line">            throw new NullPointerException();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        /* </span><br><span class="line">         * 确保key在table[]是不重复的 </span><br><span class="line">         * 处理过程： </span><br><span class="line">         * 1、计算key的hash值，确认在table[]中的索引位置 </span><br><span class="line">         * 2、迭代index索引位置，如果该位置处的链表中存在一个一样的key，则替换其value，返回旧值 </span><br><span class="line">         */  </span><br><span class="line">        Entry tab[] = table;  </span><br><span class="line">        int hash = hash(key);    //计算key的hash值  </span><br><span class="line">        int index = (hash &amp; 0x7FFFFFFF) % tab.length;     //确认该key的索引位置  </span><br><span class="line">        //迭代，寻找该key，替换  </span><br><span class="line">        for (Entry&lt;K,V&gt; e = tab[index] ; e != null ; e = e.next) &#123;  </span><br><span class="line">            if ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;  </span><br><span class="line">                V old = e.value;  </span><br><span class="line">                e.value = value;  </span><br><span class="line">                return old;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        modCount++;  </span><br><span class="line">        if (count &gt;= threshold) &#123;  //如果容器中的元素数量已经达到阀值，则进行扩容操作  </span><br><span class="line">            rehash();  </span><br><span class="line">            tab = table;  </span><br><span class="line">            hash = hash(key);  </span><br><span class="line">            index = (hash &amp; 0x7FFFFFFF) % tab.length;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        // 在索引位置处插入一个新的节点  </span><br><span class="line">        Entry&lt;K,V&gt; e = tab[index];  </span><br><span class="line">        tab[index] = new Entry&lt;&gt;(hash, key, value, e);  </span><br><span class="line">        //容器中元素+1  </span><br><span class="line">        count++;  </span><br><span class="line">        return null;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> put方法的整个处理流程是：计算key的hash值，根据hash值获得key在table数组中的索引位置，然后迭代该key处的Entry链表（我们暂且理解为链表），若该链表中存在一个这个的key对象，那么就直接替换其value值即可，否则在将改key-value节点插入该index索引位置处。如下：</p><p>​        首先我们假设一个容量为5的table，存在8、10、13、16、17、21。他们在table中位置如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-28515026422c7c95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>然后我们插入一个数：put(16,22)，key=16在table的索引位置为1，同时在1索引位置有两个数，程序对该“链表”进行迭代，发现存在一个key=16,这时要做的工作就是用newValue=22替换oldValue16，并将oldValue=16返回。 </p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-ebe6bcbee1d46f43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p> 在put(33,33)，key=33所在的索引位置为3，并且在该链表中也没有存在某个key=33的节点，所以就将该节点插入该链表的第一个位置。</p><p> 在HashTabled的put方法中有两个地方需要注意：</p><p>​        <strong>1、</strong>HashTable的扩容操作，在put方法中，如果需要向table[]中添加Entry元素，会首先进行容量校验，如果容量已经达到了阀值，HashTable就会进行扩容处理rehash()，如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">protected void rehash() &#123;  </span><br><span class="line">        int oldCapacity = table.length;  </span><br><span class="line">        //元素  </span><br><span class="line">        Entry&lt;K,V&gt;[] oldMap = table;  </span><br><span class="line">  </span><br><span class="line">        //新容量=旧容量 * 2 + 1  </span><br><span class="line">        int newCapacity = (oldCapacity &lt;&lt; 1) + 1;  </span><br><span class="line">        if (newCapacity - MAX_ARRAY_SIZE &gt; 0) &#123;  </span><br><span class="line">            if (oldCapacity == MAX_ARRAY_SIZE)  </span><br><span class="line">                return;  </span><br><span class="line">            newCapacity = MAX_ARRAY_SIZE;  </span><br><span class="line">        &#125;  </span><br><span class="line">          </span><br><span class="line">        //新建一个size = newCapacity 的HashTable  </span><br><span class="line">        Entry&lt;K,V&gt;[] newMap = new Entry[];  </span><br><span class="line">  </span><br><span class="line">        modCount++;  </span><br><span class="line">        //重新计算阀值  </span><br><span class="line">        threshold = (int)Math.min(newCapacity * loadFactor, MAX_ARRAY_SIZE + 1);  </span><br><span class="line">        //重新计算hashSeed  </span><br><span class="line">        boolean rehash = initHashSeedAsNeeded(newCapacity);  </span><br><span class="line">  </span><br><span class="line">        table = newMap;  </span><br><span class="line">        //将原来的元素拷贝到新的HashTable中  </span><br><span class="line">        for (int i = oldCapacity ; i-- &gt; 0 ;) &#123;  </span><br><span class="line">            for (Entry&lt;K,V&gt; old = oldMap[i] ; old != null ; ) &#123;  </span><br><span class="line">                Entry&lt;K,V&gt; e = old;  </span><br><span class="line">                old = old.next;  </span><br><span class="line">  </span><br><span class="line">                if (rehash) &#123;  </span><br><span class="line">                    e.hash = hash(e.key);  </span><br><span class="line">                &#125;  </span><br><span class="line">                int index = (e.hash &amp; 0x7FFFFFFF) % newCapacity;  </span><br><span class="line">                e.next = newMap[index];  </span><br><span class="line">                newMap[index] = e;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 在这个rehash()方法中我们可以看到容量扩大两倍+1，同时需要将原来HashTable中的元素一一复制到新的HashTable中，这个过程是比较消耗时间的，同时还需要重新计算hashSeed的，毕竟容量已经变了。这里对阀值啰嗦一下：比如初始值11、加载因子默认0.75，那么这个时候阀值threshold=8，当容器中的元素达到8时，HashTable进行一次扩容操作，容量 = 11 <em> 2 + 1 =23，而阀值threshold=23</em>0.75 = 17，当容器元素再一次达到阀值时，HashTable还会进行扩容操作，一次类推。 </p><p> <strong>2、</strong>其实这里是我的一个疑问，在计算索引位置index时，HashTable进行了一个与运算过程（hash &amp; 0x7FFFFFFF）。下面是计算key的hash值，这里hashSeed发挥了作用。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private int hash(Object k) &#123;  </span><br><span class="line">        return hashSeed ^ k.hashCode();  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>  相对于put方法，get方法就会比较简单，处理过程就是计算key的hash值，判断在table数组中的索引位置，然后迭代链表，匹配直到找到相对应key的value,若没有找到返回null。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public synchronized V get(Object key) &#123;  </span><br><span class="line">        Entry tab[] = table;  </span><br><span class="line">        int hash = hash(key);  </span><br><span class="line">        int index = (hash &amp; 0x7FFFFFFF) % tab.length;  </span><br><span class="line">        for (Entry&lt;K,V&gt; e = tab[index] ; e != null ; e = e.next) &#123;  </span><br><span class="line">            if ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;  </span><br><span class="line">                return e.value;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        return null;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="四、HashTable与HashMap的区别"><a href="#四、HashTable与HashMap的区别" class="headerlink" title="四、HashTable与HashMap的区别"></a>四、HashTable与HashMap的区别</h3><p>​        HashTable和HashMap存在很多的相同点，但是他们还是有几个比较重要的不同点。</p><p>​        <strong>第一：</strong>我们从他们的定义就可以看出他们的不同，HashTable基于Dictionary类，而HashMap是基于AbstractMap。Dictionary是什么？它是任何可将键映射到相应值的类的抽象父类，而AbstractMap是基于Map接口的骨干实现，它以最大限度地减少实现此接口所需的工作。</p><p>​        <strong>第二：</strong>HashMap可以允许存在一个为null的key和任意个为null的value，但是HashTable中的key和value都不允许为null。如下：</p><p>​        当HashMap遇到为null的key时，它会调用putForNullKey方法来进行处理。对于value没有进行任何处理，只要是对象都可以。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (key == null)  </span><br><span class="line">            return putForNullKey(value);</span><br></pre></td></tr></table></figure><p>而当HashTable遇到null时，他会直接抛出NullPointerException异常信息。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (value == null) &#123;  </span><br><span class="line">            throw new NullPointerException();  </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p> <strong>第三：</strong>Hashtable的方法是同步的，而HashMap的方法不是。所以有人一般都建议如果是涉及到多线程同步时采用HashTable，没有涉及就采用HashMap，但是在Collections类中存在一个静态方法：synchronizedMap()，该方法创建了一个线程安全的Map对象，并把它作为一个封装的对象来返回，所以通过Collections类的synchronizedMap方法是可以同步访问潜在的HashMap。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 有两个类都提供了一个多种用途的hashTable机制，他们都可以将可以key和value结合起来构成键值对通过put(key,value)方法保存起来，然后通过get(key)方法获取相对应的value值。一个是前面提到的HashMap，还有一个就是马上要讲解的HashT
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HashMap原理及实现学习总结</title>
    <link href="http://yoursite.com/2018/06/05/HashMap%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/06/05/HashMap原理及实现学习总结/</id>
    <published>2018-06-05T11:43:55.434Z</published>
    <updated>2018-06-05T11:49:30.491Z</updated>
    
    <content type="html"><![CDATA[<p>HashMap是Java中最常用的集合类框架之一，是Java语言中非常典型的数据结构。本篇主要是从HashMap的工作原理，数据结构分析，HashMap存储和读取几个方面对其进行学习总结。 </p><h2 id="一-HashMap的工作原理"><a href="#一-HashMap的工作原理" class="headerlink" title="一. HashMap的工作原理"></a>一. HashMap的工作原理</h2><p>HashMap基于hashing原理，我们通过put()和get()方法储存和获取对象。当我们将键值对传递给put()方法时，它调用键对象的hashCode()方法来计算hashcode，让后找到bucket位置来储存值对象。当获取对象时，通过键对象的equals()方法找到正确的键值对，然后返回值对象。HashMap使用LinkedList来解决碰撞问题，当发生碰撞了，对象将会储存在LinkedList的下一个节点中。 HashMap在每个LinkedList节点中储存键值对对象。<br>当两个不同的键对象的hashcode相同时会发生什么？ 它们会储存在同一个bucket位置的LinkedList中。键对象的equals()方法用来找到键值对。</p><h2 id="二-HashMap的定义"><a href="#二-HashMap的定义" class="headerlink" title="二.HashMap的定义"></a>二.HashMap的定义</h2><p>HashMap实现了Map接口，继承AbstractMap。其中Map接口定义了键映射到值的规则，而AbstractMap类提供 Map 接口的骨干实现，以最大限度地减少实现此接口所需的工作！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class HashMap&lt;K,V&gt;  </span><br><span class="line">    extends AbstractMap&lt;K,V&gt;  </span><br><span class="line">    implements Map&lt;K,V&gt;, Cloneable, Serializable  123</span><br></pre></td></tr></table></figure><h2 id="三-HashMap的数据结构"><a href="#三-HashMap的数据结构" class="headerlink" title="三.HashMap的数据结构"></a>三.HashMap的数据结构</h2><p>HashMap的底层主要是基于数组和链表来实现的，它之所以有相当快的查询速度主要是因为它是通过计算散列码来决定存储的位置。HashMap中主要是通过key的hashCode来计算hash值的，只要hashCode相同，计算出来的hash值就一样。如果存储的对象对多了，就有可能不同的对象所算出来的hash值是相同的，这就出现了所谓的hash冲突。学过数据结构的同学都知道，解决hash冲突的方法有很多，HashMap底层是通过链表来解决hash冲突的。 </p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-cb0a6e8005bc2bc9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>紫色部分即代表哈希表，也称为哈希数组，数组的每个元素都是一个单链表的头节点，链表是用来解决冲突的，如果不同的key映射到了数组的同一位置处，就将其放入单链表中。 </p><h2 id="四-HashMap的构造函数"><a href="#四-HashMap的构造函数" class="headerlink" title="四.HashMap的构造函数"></a>四.HashMap的构造函数</h2><p>在这里提到了两个参数：初始容量，加载因子。这两个参数是影响HashMap性能的重要参数，其中容量表示哈希表中桶的数量，初始容量是创建哈希表时的容量，加载因子是哈希表在其容量自动增加之前可以达到多满的一种尺度，它衡量的是一个散列表的空间的使用程度，负载因子越大表示散列表的装填程度越高，反之愈小。对于使用链表法的散列表来说，查找一个元素的平均时间是O(1+a)，因此如果负载因子越大，对空间的利用更充分，然而后果是查找效率的降低；如果负载因子太小，那么散列表的数据将过于稀疏，对空间造成严重浪费。系统默认负载因子为0.75，一般情况下我们是无需修改的。当哈希表中的条目数超出了加载因子与当前容量的乘积时，通过调用 rehash 方法将容量翻倍。<br>HashMap一共重载了4个构造方法，分别为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap();//构造一个具有默认初始容量 (16) 和默认加载因子 (0.75) 的空 HashMap。</span><br><span class="line">HashMap(int initialCapacity);//构造一个带指定初始容量和默认加载因子 (0.75) 的空 HashMap。</span><br><span class="line">HashMap(int initialCapacity, float loadFactor);//构造一个带指定初始容量和加载因子的空 HashMap。</span><br><span class="line">HashMap(Map&lt;? extendsK,? extendsV&gt; m); //构造一个映射关系与指定 Map 相同的 HashMap。1234</span><br></pre></td></tr></table></figure><p>下面是第三个构造方法源码，其它构造方法最终调用的都是它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 构造一个带指定初始容量和加载因子的空 HashMap。</span><br><span class="line">    public HashMap(int initialCapacity, float loadFactor) &#123;</span><br><span class="line">        // 如果指定初始容量小于0，抛错</span><br><span class="line">        if (initialCapacity &lt; 0)</span><br><span class="line">            throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; + initialCapacity);</span><br><span class="line">        // 如果初始容量大于系统默认最大容量，则初始容量为最大容量</span><br><span class="line">        if (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        // 如果loadFactor小于0，或loadFactor是NaN，则抛错</span><br><span class="line">        if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))</span><br><span class="line">            throw new IllegalArgumentException(&quot;Illegal load factor: &quot; + loadFactor);</span><br><span class="line"></span><br><span class="line">        // 寻找一个2的k次幂capacity恰好大于initialCapacity</span><br><span class="line">        int capacity = 1;</span><br><span class="line">        while (capacity &lt; initialCapacity)</span><br><span class="line">            capacity &lt;&lt;= 1;</span><br><span class="line"></span><br><span class="line">        // 设置加载因子</span><br><span class="line">        this.loadFactor = loadFactor;</span><br><span class="line">        // 设置阈值为capacity * loadFactor，实际上当HashMap当前size到达这个阈值时，HashMap就需要扩大一倍了。</span><br><span class="line">        threshold = (int) (capacity * loadFactor);</span><br><span class="line">        // 创建一个capacity长度的数组用于保存数据</span><br><span class="line">        table = new Entry[capacity];</span><br><span class="line">        // 开始初始化</span><br><span class="line">        init();</span><br><span class="line">    &#125;1234567891011121314151617181920212223242526</span><br></pre></td></tr></table></figure><p>从源码中可以看出，每次新建一个HashMap时，都会初始化一个table数组。table数组的元素为Entry节点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">// 内置class输入对象，也就是我们说的桶</span><br><span class="line">    static class Entry&lt;K, V&gt; implements Map.Entry&lt;K, V&gt; &#123;</span><br><span class="line">        final K key;</span><br><span class="line">        V value;</span><br><span class="line">        Entry&lt;K, V&gt; next;</span><br><span class="line">        final int hash;</span><br><span class="line"></span><br><span class="line">        // 构造函数</span><br><span class="line">        Entry(int h, K k, V v, Entry&lt;K, V&gt; n) &#123;</span><br><span class="line">            value = v;</span><br><span class="line">            next = n;</span><br><span class="line">            key = k;</span><br><span class="line">            hash = h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 返回key</span><br><span class="line">        public final K getKey() &#123;</span><br><span class="line">            return key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 返回value</span><br><span class="line">        public final V getValue() &#123;</span><br><span class="line">            return value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 设置value</span><br><span class="line">        public final V setValue(V newValue) &#123;</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            return oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 是否相同</span><br><span class="line">        public final boolean equals(Object o) &#123;</span><br><span class="line">            // 如果o不是Map.Entry的实例，那么肯定不相同了</span><br><span class="line">            if (!(o instanceof Map.Entry))</span><br><span class="line">                return false;</span><br><span class="line">            // 将o转成Map.Entry</span><br><span class="line">            Map.Entry e = (Map.Entry) o;</span><br><span class="line">            // 得到key和value对比是否相同，相同则为true</span><br><span class="line">            Object k1 = getKey();</span><br><span class="line">            Object k2 = e.getKey();</span><br><span class="line">            if (k1 == k2 || (k1 != null &amp;&amp; k1.equals(k2))) &#123;</span><br><span class="line">                Object v1 = getValue();</span><br><span class="line">                Object v2 = e.getValue();</span><br><span class="line">                if (v1 == v2 || (v1 != null &amp;&amp; v1.equals(v2)))</span><br><span class="line">                    return true;</span><br><span class="line">            &#125;</span><br><span class="line">            // 否则为false</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // hashCode</span><br><span class="line">        public final int hashCode() &#123;</span><br><span class="line">            return (key == null ? 0 : key.hashCode()) ^ (value == null ? 0 : value.hashCode());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 返回String</span><br><span class="line">        public final String toString() &#123;</span><br><span class="line">            return getKey() + &quot;=&quot; + getValue();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 使用该方法证明该key已经在该map中</span><br><span class="line">        void recordAccess(HashMap&lt;K, V&gt; m) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 该方法记录该key已经被移除了</span><br><span class="line">        void recordRemoval(HashMap&lt;K, V&gt; m) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中Entry为HashMap的内部类，它包含了键key、值value、下一个节点next，以及hash值，这是非常重要的，正是由于Entry才构成了table数组的项为链表。</p><h2 id="五-HashMap的存储实现"><a href="#五-HashMap的存储实现" class="headerlink" title="五.HashMap的存储实现"></a>五.HashMap的存储实现</h2><p>HashMap中我们最长用的就是put(K, V)和get(K)。我们都知道，HashMap的K值是唯一的，那如何保证唯一性呢？我们首先想到的是用equals比较，没错，这样可以实现，但随着内部元素的增多，put和get的效率将越来越低，这里的时间复杂度是O(n)，假如有1000个元素，put时需要比较1000次。实际上，HashMap很少会用到equals方法，因为其内通过一个哈希表管理所有元素，哈希是通过hash单词音译过来的，也可以称为散列表，哈希算法可以快速的存取元素，当我们调用put存值时，HashMap首先会调用K的hashCode方法，获取哈希码，通过哈希码快速找到某个存放位置，这个位置可以被称之为bucketIndex，通过上面所述hashCode的协定可以知道，如果hashCode不同，equals一定为false，如果hashCode相同，equals不一定为true。所以理论上，hashCode可能存在冲突的情况，有个专业名词叫碰撞，当碰撞发生时，计算出的bucketIndex也是相同的，这时会取到bucketIndex位置已存储的元素，最终通过equals来比较，equals方法就是哈希码碰撞时才会执行的方法，所以前面说HashMap很少会用到equals。HashMap通过hashCode和equals最终判断出K是否已存在，如果已存在，则使用新V值替换旧V值，并返回旧V值，如果不存在 ，则存放新的键值对到bucketIndex位置。整个put过程的流程图如下： </p><p><img src="https://upload-images.jianshu.io/upload_images/12434140-17e797425f9b3d51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>相关源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 在此映射中关联指定值与指定键。如果该映射以前包含了一个该键的映射关系，则旧值被替换</span><br><span class="line">    public V put(K key, V value) &#123;</span><br><span class="line">        // 当key为null，调用putForNullKey方法，保存null与table第一个位置中，这是HashMap允许为null的原因 </span><br><span class="line">        if (key == null)</span><br><span class="line">            return putForNullKey(value);</span><br><span class="line">        // 使用hash函数预处理hashCode，计算key的hash值  </span><br><span class="line">        int hash = hash(key.hashCode());//-------（1）</span><br><span class="line">        // 计算key hash 值在 table 数组中的位置 </span><br><span class="line">        int i = indexFor(hash, table.length);//------(2)</span><br><span class="line">        // 从i出开始迭代 e,找到 key 保存的位置</span><br><span class="line">        for (Entry&lt;K, V&gt; e = table[i]; e != null; e = e.next) &#123;</span><br><span class="line">            Object k;</span><br><span class="line">            // 判断该条链上是否有hash值相同的(key相同) </span><br><span class="line">            // 若存在相同，则直接覆盖value，返回旧value </span><br><span class="line">            if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">                // 旧值 = 新值  </span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                // 将要存储的value存进去</span><br><span class="line">                e.value = value;</span><br><span class="line">                e.recordAccess(this);</span><br><span class="line">                // 返回旧的value</span><br><span class="line">                return oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 修改次数增加1 </span><br><span class="line">        modCount++;</span><br><span class="line">        // 将key、value添加至i位置处 </span><br><span class="line">        addEntry(hash, key, value, i);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;123456789101112131415161718192021222324252627282930</span><br></pre></td></tr></table></figure><p>通过源码我们可以清晰看到HashMap保存数据的过程为：首先判断key是否为null，若为null，则直接调用putForNullKey方法。若不为空则先计算key的hash值，然后根据hash值搜索在table数组中的索引位置，如果table数组在该位置处有元素，则通过比较是否存在相同的key，若存在则覆盖原来key的value，否则将该元素保存在链头（最先保存的元素放在链尾）。若table在该处没有元素，则直接保存。这个过程看似比较简单，其实深有内幕。有如下几点：<br>1、 先看迭代处。此处迭代原因就是为了防止存在相同的key值，若发现两个hash值（key）相同时，HashMap的处理方式是用新value替换旧value，这里并没有处理key，这就解释了HashMap中没有两个相同的key。<br>2、 在看（1）、（2）处。这里是HashMap的精华所在。首先是hash方法，该方法为一个纯粹的数学计算，就是计算h的hash值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static int hash(int h) &#123;  </span><br><span class="line">        h ^= (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);  </span><br><span class="line">        return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);  </span><br><span class="line">    &#125;  1234</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 我们知道对于HashMap的table而言，数据分布需要均匀（最好每项都只有一个元素，这样就可以直接找到），不能太紧也不能太松，太紧会导致查询速度慢，太松则浪费空间。计算hash值后，怎么才能保证table元素分布均与呢？我们会想到取模，但是由于取模的消耗较大，HashMap是这样处理的：调用indexFor方法。</span><br><span class="line">12</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static int indexFor(int h, int length) &#123;  </span><br><span class="line">        return h &amp; (length-1);  </span><br><span class="line">    &#125; 123</span><br></pre></td></tr></table></figure><p>HashMap的底层数组长度总是2的n次方，在构造函数中存在：capacity &lt;&lt;= 1;这样做总是能够保证HashMap的底层数组长度为2的n次方。当length为2的n次方时，h&amp;(length - 1)就相当于对length取模，而且速度比直接取模快得多，这是HashMap在速度上的一个优化。<br>这里再来复习put的流程：当我们想一个HashMap中添加一对key-value时，系统首先会计算key的hash值，然后根据hash值确认在table中存储的位置。若该位置没有元素，则直接插入。否则迭代该处元素链表并依此比较其key的hash值。如果两个hash值相等且key值相等(e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))),则用新的Entry的value覆盖原来节点的value。如果两个hash值相等但key值不等 ，则将该节点插入该链表的链头。具体的实现过程见addEntry方法，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 添加一个新的桶来保存该key和value</span><br><span class="line">    void addEntry(int hash, K key, V value, int bucketIndex) &#123;</span><br><span class="line">        // 获取bucketIndex处的Entry </span><br><span class="line">        Entry&lt;K, V&gt; e = table[bucketIndex];</span><br><span class="line">        // 将新创建的 Entry 放入 bucketIndex 索引处，并让新的 Entry 指向原来的 Entry  </span><br><span class="line">        table[bucketIndex] = new Entry&lt;K, V&gt;(hash, key, value, e);</span><br><span class="line">        // 若HashMap中元素的个数超过极限了，则容量扩大两倍 </span><br><span class="line">        if (size++ &gt;= threshold)</span><br><span class="line">            // 调整容量</span><br><span class="line">            resize(2 * table.length);</span><br><span class="line">    &#125;1234567891011</span><br></pre></td></tr></table></figure><p>这个方法中有两点需要注意：<br>一是链的产生：系统总是将新的Entry对象添加到bucketIndex处。如果bucketIndex处已经有了对象，那么新添加的Entry对象将指向原有的Entry对象，形成一条Entry链，但是若bucketIndex处没有Entry对象，也就是e==null,那么新添加的Entry对象指向null，也就不会产生Entry链了。<br>二是扩容问题：随着HashMap中元素的数量越来越多，发生碰撞的概率就越来越大，所产生的链表长度就会越来越长，这样势必会影响HashMap的速度，为了保证HashMap的效率，系统必须要在某个临界点进行扩容处理。该临界点在当HashMap中元素的数量等于table数组长度*加载因子。但是扩容是一个非常耗时的过程，因为它需要重新计算这些数据在新table数组中的位置并进行复制处理。所以如果我们已经预知HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。</p><h2 id="六-HashMap的读取实现"><a href="#六-HashMap的读取实现" class="headerlink" title="六.HashMap的读取实现"></a>六.HashMap的读取实现</h2><p>通过key的hash值找到在table数组中的索引处的Entry，然后返回该key对应的value即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 返回指定键所映射的值；如果对于该键来说，此映射不包含任何映射关系，则返回 null</span><br><span class="line">    public V get(Object key) &#123;</span><br><span class="line">        // 若为null，调用getForNullKey方法返回相对应的value </span><br><span class="line">        if (key == null)</span><br><span class="line">            return getForNullKey();</span><br><span class="line">        // 根据该 key 的 hashCode 值计算它的 hash 码  </span><br><span class="line">        int hash = hash(key.hashCode());</span><br><span class="line">        // 取出 table 数组中指定索引处的值</span><br><span class="line">        for (Entry&lt;K, V&gt; e = table[indexFor(hash, table.length)]; e != null; e = e.next) &#123;</span><br><span class="line">            Object k;</span><br><span class="line">            // 如果hash值相等，并且key相等则证明这个桶里的东西是我们想要的</span><br><span class="line">            if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k)))</span><br><span class="line">                return e.value;</span><br><span class="line">        &#125;</span><br><span class="line">        // 所有桶都找遍了，没找到想要的，所以返回null</span><br><span class="line">        return null;</span><br><span class="line">    &#125;1234567891011121314151617</span><br></pre></td></tr></table></figure><p>在这里能够根据key快速的取到value除了和HashMap的数据结构密不可分外，还和Entry有莫大的关系，在前面就提到过，HashMap在存储过程中并没有将key，value分开来存储，而是当做一个整体key-value来处理的，这个整体就是Entry对象。同时value也只相当于key的附属而已。在存储的过程中，系统根据key的hashcode来决定Entry在table数组中的存储位置，在取的过程中同样根据key的hashcode取出相对应的Entry对象。</p><h2 id="七-HashMap和多线程相关的问题"><a href="#七-HashMap和多线程相关的问题" class="headerlink" title="七.HashMap和多线程相关的问题"></a>七.HashMap和多线程相关的问题</h2><p>HashMap是线程不安全的实现，而HashTable是线程安全的实现。所谓线程不安全，就是在多线程情况下直接使用HashMap会出现一些莫名其妙不可预知的问题，多线程和单线程的区别：单线程只有一条执行路径，而多线程是并发执行(非并行)，会有多条执行路径。如果HashMap是只读的(加载一次，以后只有读取，不会发生结构上的修改)，那使用没有问题。那如果HashMap是可写的(会发生结构上的修改)，则会引发诸多问题，如上面的fail-fast，也可以看下这里，这里就不去研究了。<br>那在多线程下使用HashMap我们需要怎么做，几种方案：<br>1.在外部包装HashMap，实现同步机制<br>2.使用Map m = Collections.synchronizedMap(new HashMap(…));，这里就是对HashMap做了一次包装<br>3.使用java.util.HashTable，效率最低<br>4.使用java.util.concurrent.ConcurrentHashMap，相对安全，效率较高</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HashMap是Java中最常用的集合类框架之一，是Java语言中非常典型的数据结构。本篇主要是从HashMap的工作原理，数据结构分析，HashMap存储和读取几个方面对其进行学习总结。 &lt;/p&gt;
&lt;h2 id=&quot;一-HashMap的工作原理&quot;&gt;&lt;a href=&quot;#一-H
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SSH项目技术点总结</title>
    <link href="http://yoursite.com/2018/06/05/SSH%E9%A1%B9%E7%9B%AE%E6%8A%80%E6%9C%AF%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/06/05/SSH项目技术点总结/</id>
    <published>2018-06-05T08:36:47.418Z</published>
    <updated>2018-06-05T08:50:52.523Z</updated>
    
    <content type="html"><![CDATA[<p>分享一下总结的去年做过的一个传统ssh项目所用到的一些技术点，准备面试换工作的小伙伴们可以看看。</p><p><strong>1.什么是git，和svn的区别</strong></p><blockquote><p>git是一个分布式的版本控制系统,一般用于代码的版本控制,类似于svn,区别在于git可以在建立本地仓库，这样代码可以提交到本地，这样可以断网提交，可以查找本地的代码提交历史记录。git有像github,码云这样的代码托管网站(我们项目就放在github上),下代码很方便。</p></blockquote><p><strong>2.什么是maven, maven中的依赖范围，依赖传递是什么意思</strong></p><blockquote><p>maven是一个软件项目管理工具,一般用它的配置文件pom来加载jar包,也可以用来编译工程发布工程<br>安装一个外包maven并整合到eclipse中，通过配置文件指定jar包的本地仓库，私服，和中央仓库，镜像等。<br>通过maven引入jar包，也通过maven将工程发布出去给其它工程引用。<br>依赖范围是用来控制打jar包的范围。<br>compile 编译、测试、运行<br>provided 编译、和测试有效<br>runtime：测试、运行有效。<br>test：只是测试有效，只在单元测试类中用。<br>依赖传递 就近原则<br>坐标 </p></blockquote><p><strong>3.spring的原理，它是如何整合其它框架的</strong></p><blockquote><p>AOP(面向切面编程) 对指定的业务进行统一的增强，如事务处理，日志记录，性能统计，将这些代码从业务逻辑代码中抽取出来。<br>IOC(控制反转)DI(依赖注入)<br>(1)项目引入的bean对象不用我们从bean工厂取，而是通过sring里的配置文件得到<br>（2）web层调service,service调dao都是通过加注解的方式，让spring注入进来，不用我们new出来<br>spring一般通过配置文件将其它框架整合进来，在配置文件中配置bean工厂或模板和相关的属性，这样我们就不需要自己new出来bean工厂而是由spring统一得到</p></blockquote><p><strong>4.什么是模型驱动，什么是领域驱动建模，有什么好处</strong></p><blockquote><p>模型驱动是使用javaBean对象来封装请求参数，在整个MVC流程中可以直接使用这个对象,用起来方便（对比属性驱动，对比servlet中request.getParameter）</p><p>领域驱动建模是对业务对象的的抽取，就程序来说领域模型就是java里面的实体bean(domain),我们将这些实体bean抽取出来，通过maven配置引入，不同的工程就都可以使用这些模型。</p></blockquote><p><strong>5.什么是jpa,springdatajpa和hibernate之间的关系</strong></p><blockquote><p>jpa是sun公司定义的一套数据持久层的标准，是一种规范 hibernate是具体的技术实现 还有别的技术（Toplink等）但不流行了。类似于接口和实现类的关系<br>jpa定义的是一系列的接口和注解。Spring Data JPA 是在JPA规范的基础下提供了Repository层的实现<br>好处 用jpa方式 开发者面向JPA规范的接口 不必关注底层的JPA实现 哪种好用哪个 不用再去学习一套新的技术<br>减少学习成本。</p></blockquote><p><strong>6.用springdatajpa有什么好处,为什么</strong></p><blockquote><p>对于Oracle数据库，我们自己编写的dao 继承了jparepository接口 在具体实用时由 sprinrg容器给我们注入进一个实现类，<br>使用springdatajpa抽象了具体的数据库操作，项目中用的redis,elasticsearch和ehcache都可以通过springdatajpa来操作</p></blockquote><p><strong>7.webservice是干什么的</strong></p><blockquote><p>webservice就是多项目，多平台之间进行方法调用的一种技术，现在工作中用cxf框架通过spring配置进项目来，用起来很简单的，只要在普通的服务上加上对应的注解就可以发布出去了。<br>webservice分成两种方式，一种是传统的基于sopa协议的方式，一种是rest的方式，传统的ws的方式不太常用了,我们项目中是用的就是rest的方式</p></blockquote><p><strong>8.webservice的两种实现方式rs和ws的区别</strong></p><blockquote><p>rs和ws的最主要的是rest是用的http协议，传统ws用的是soap协议，一般ws用的是xml格式而rs用的多是json格式，如果是完全基于restful风格，那么发布的服务就是一个资源,具体的增删改查方式是通过请求方式post,delete,put,get的方式来确定的。<br>rs更方便，更流行一些，因为它是返回json格式 访问服务的客户端只用通过工具webClient或者httpclient就可以访问了。</p></blockquote><p><strong>9.分页查询的参数，及查询后的数据是如何返回的</strong></p><blockquote><p>请求参数页码，每页记录数<br>返回总记录数和当前页数据记录 一般返回的当前页数据是一个list集合, 我们要把list和总记录数封装到一个对象中返回前端页面</p></blockquote><p><strong>10.AngularJS的几个特性,什么是路由</strong></p><blockquote><p>MVC,（模仿后台框架的MVC Controller就是js代码，Model）<br>双向数据绑定(更新模型，视图会自动更新，更新视图，模型会自动更新)<br>模块化设计<br>官方提供的模块 ng、ngRoute<br>用户自定义的模块 angular.module(‘模块名’,[ ])<br>angularJs实现单页面多视图的页面跳转效果 类似于url跳转</p></blockquote><p><strong>11.什么是消息队列(mq) 消息服务器的应用场景和队列的两种方式</strong></p><blockquote><p>消息队列中间件是分布式系统中的一种的组件，主要解决应用服务之间耦合,异步消息，流量削锋,等问题实现提高系统性能的一种架构<br>2、ActiveMQ 应用场景分析<br>1）用户注册，重点用户信息数据库保存，发短信、发邮件，增加业务处理复杂度，这时候用MQ，将发短信、发邮箱，通知MQ，由另外服务平台完成<br>2）搜索平台、缓存平台<br>查询数据，建立缓存、索引，不从数据库查询，从缓存或者索引库查询<br>当增加、修改，删除数据时，发送消息给MQ，缓存平台、索引平台从MQ获取到这个消息，更新缓存或者索引<br>1）Queue队列，生产者生产了一个消息，只能由一个消费者进行消费<br>2）Topic话题，生产者生产了一个消息，可以由多个消费者进行消费</p></blockquote><p><strong>12.什么是页面静态化，如何实现,有什么好处</strong></p><blockquote><p>Freemarker</p><p>将动态数据访问，生成为一个静态html页面，提高查询效率<br>页面静态化，其实就是将动态生成的jsp页面，变成静态的HTML页面，让用户直接访问。有一下几方面好处：<br>1，首先就是访问速度，不需要去访问数据库，或者缓存来获取哪些数据，浏览器直接加载渲染html页即可。所以可以大大的提高访问效率；<br>2，从网站优化来分析，搜索引擎更喜欢静态的网页，静态网页与动态网页相比，搜索引擎更喜欢静的，更便于抓取，搜索引擎SEO排名更容易提高。<br>3，从安全角度讲，静态网页不宜遭到黑客攻击，如果黑客不知道你网站的后台、网站采用程序、数据库的地址，静态网页， 更不容易受到黑客的攻击。<br>4，从网站稳定性来讲，如果程序、数据库出了问题，会直接影响网站的访问，而静态网页就避免了如此情况，不会因为程序等，而损失网站数据，影响正常打开，损失用户体验，影响网站信任度。<br>注意问题：<br>1，随着项目的扩大，静态html页面将会不断的增大，增多，所以要注意管理这些静态页面。例如路径的管理,及时更新的管理等等。<br>2，有些页面并不一定非要来静态化，但是为了避免地址暴露过多的信息，也可以用URL伪静态，使页面看起来就像静态页面一样，原理只是一个Filter。</p></blockquote><p><strong>13.Quartz是什么，应用场景</strong></p><blockquote><p>定时任务框架<br>用户解冻：比如用户在登录的时候，连续输错3次密码后，系统会将该用户冻结，不再允许该用户登录系统，等到了晚上零晨时分，再为所有被冻结的用户解冻，这样，用户在第二天又可以正常登录系统<br>抓取日志:比如需要在每天凌晨时候，分析一次前一天的日志信息<br>sheduler</p><p>job jobFactory</p><p>trigger</p></blockquote><p><strong>14.elasticserach是什么，原理, 如何使用，和lucene的关系</strong></p><blockquote><p>1、Lucene就是一套全文检索编程API，基于Lucene对数据建立索引，进行查询。<br>2、现代企业开发中，更常用的是solr搜索服务器和ElasticSearch搜索服务器。<br>主要概念<br>索引 文档 文档类型 映射<br>1）索引对象（数据存在哪？）：存储数据的表结构，任何搜索数据，存放在索引对象上<br>2）映射（数据怎么存？）：数据如何存放到索引对象上，需要有一个映射配置，数据类型、是否存储、是否分词…<br>3）文档（存什么数据？）：一条数据记录，存在索引对象上<br>4）文档类型（数据有哪些类型？）：一个索引对象，存放多种类型数据，数据用文档类型进行标识<br>编程步骤</p><p>1）建立索引对象</p><p>2）建立映射</p><p>3）存储数据【文档】</p><p>4）指定文档类型进行搜索数据【文档】</p><p>5）查询数据【文档】</p></blockquote><p><strong>15.缓存的原理，redis和ehcache的比较</strong></p><blockquote><p>缓存可以提高查询性能，对同一批数据进行多次查询时，第一次查询走数据库，查询数据后，将数据保存在内存中，第二次以后查询可以直接从内存获取数据，而不需要和数据库进行交互.<br>最简单的缓存实现可以用一个map实现，map的键存查询语句，map的值存对应查询到的数据。<br>ehcahe和redis的比较<br>ehcache直接在本机jvm虚拟机中缓存，速度快，效率高，本机速度自然是最快的，但重启web容器会一起消亡掉，只能当前web应用访问操作, 做缓存共享麻烦，集群分布式应用不方便。ehcahe可做hibernate的二级缓存。<br>redis是通过socket访问到缓存服务，效率比ecache低，比数据库要快很多，处理集群和分布式缓存方便，有成熟的方案。<br>如果是单个应用或者对缓存访问要求很高的应用，用ehcache。如果是大型系统，存在缓存共享、分布式部署、缓存内容很大的，建议用redis。<br>ehcache也有缓存共享方案，不过是通过RMI或者Jgroup多播方式进行广播缓存通知更新，缓存共享复杂，维护不方便；简单的共享可以，但是涉及到缓存恢复，大数据缓存，则不合适。总之ehcache能干的活redis都能干，redis能干的，ehcache不一定。</p></blockquote><p><strong>16.权限控制的几种方式, Shiro如何实现权限控制</strong></p><blockquote><p>第一种：URL级别粗粒度权限控制（重点）<br>配置web.xml的shiroFilter拦截 /<em><br>在spring的applicationContext</em>.xml配置文件中配置同名的bean，配置filterChainDefinitions拦截控制规则<br>xxx.html<em>=anon（未登录可以访问）<br>xxx.html</em>=authc（必须登录才能访问）<br>xxx.html<em>=perms[权限]（需要特定权限才能访问 ）<br>xxx.html</em>=roles[角色]（需要特定角色才能访问）<br>第二种：方法级别细粒度权限控制<br>在spring的applicationContext*.xml配置spring aop对spring管理bean对象开启shiro注解支持<br>@RequiresPermissions(权限) 需要特定权限才能访问<br>@RequiresRoles(角色) 需要特定角色才能访问<br>@RequiresAuthentication 需要认证才能访问<br>Shiro执行流程<br>应用程序—&gt;Subject—&gt;SecurityManager—&gt;Realm—&gt;安全数据</p></blockquote><p><strong>17.延迟加载是什么问题，如何解决</strong></p><blockquote><p>查询数据时当对象中有一对多的关联属性 当要在view层获取数据时比如将对象转化成json，由于session已关闭造成无法读取数据<br>要看实际业务需不需要展示多方数据<br>如果不需要直接加载<br>则在相关属性的get方法上加@JSON(serialize=false)注解<br>如果需要立即加载则有三种方式 效率由底到高<br>1 service中手动查询出来<br>2 加注解 @OneToMany(fetch=FetchType.EAGER)<br>3 配OpenEntityManagerInView filter</p></blockquote><p><strong>18.什么是报表,如何生成报表</strong></p><blockquote><p>报表就是数据的呈现,对于程序员来说就是复杂SQL查询语句，可以生成excel(poi)格式，pdf(ireport)格式或前端highcharts生成图表</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;分享一下总结的去年做过的一个传统ssh项目所用到的一些技术点，准备面试换工作的小伙伴们可以看看。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.什么是git，和svn的区别&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git是一个分布式的版本控制系统,一般用于代码的版本控
      
    
    </summary>
    
    
  </entry>
  
</feed>
